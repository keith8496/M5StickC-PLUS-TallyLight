[
    {
        "id": "aa4f5cbbfcfb79f5",
        "type": "tab",
        "label": "ATEM",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f8fea6023a301ee0",
        "type": "tab",
        "label": "Config",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "94ae0c80ae773134",
        "type": "tab",
        "label": "Preview",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "20e8e8ac36f6e0b9",
        "type": "tab",
        "label": "Tally",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e915b08ab287bdeb",
        "type": "tab",
        "label": "Websockets",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1b40ef83a0652010",
        "type": "subflow",
        "name": "Oauth2 Refresh",
        "info": "",
        "category": "Google API",
        "in": [
            {
                "x": 240,
                "y": 80,
                "wires": [
                    {
                        "id": "ae3bb5af57217834"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 80,
                "wires": [
                    {
                        "id": "89eff7bbb77b98c4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Client_id",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Secret",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            }
        ],
        "meta": {},
        "color": "#C0DEED",
        "icon": "font-awesome/fa-lock"
    },
    {
        "id": "c516bb43d26b1e4d",
        "type": "subflow",
        "name": "Google Oauth2",
        "info": "",
        "category": "Google API",
        "in": [
            {
                "x": 480,
                "y": 320,
                "wires": [
                    {
                        "id": "0e032ab54e41c7f9"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 80,
                "wires": [
                    {
                        "id": "4bbcc28955c3b685",
                        "port": 0
                    }
                ]
            },
            {
                "x": 760,
                "y": 320,
                "wires": [
                    {
                        "id": "0e032ab54e41c7f9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Client_id",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Secret",
                "type": "cred",
                "ui": {
                    "icon": "font-awesome/fa-lock"
                }
            },
            {
                "name": "Scope",
                "type": "str",
                "value": "calendar.events",
                "ui": {
                    "icon": "font-awesome/fa-angle-double-right",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Redirect",
                "type": "str",
                "value": "http://127.0.0.1:1880/Google/oauth2",
                "ui": {
                    "icon": "font-awesome/fa-globe",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            },
            {
                "name": "Dashboard",
                "type": "str",
                "value": "http://127.0.0.1:1880/ui",
                "ui": {
                    "icon": "font-awesome/fa-globe",
                    "type": "input",
                    "opts": {
                        "types": [
                            "str"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "module": "google_oauth2",
            "version": "1.0.0",
            "author": "farmer.eds.shed@gmail.com",
            "desc": "Authentication Node for Google API",
            "keywords": "google api, google oauth2",
            "license": "GPL-3.0"
        },
        "color": "#C0DEED",
        "icon": "font-awesome/fa-lock"
    },
    {
        "id": "5686e1527b566b3a",
        "type": "subflow",
        "name": "Google Request",
        "info": "",
        "category": "Google API",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "d551ba8719838517"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 660,
                "y": 100,
                "wires": [
                    {
                        "id": "90a8d211d4705e7d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "method",
                "type": "str",
                "value": "GET",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "GET"
                                },
                                "v": "GET"
                            },
                            {
                                "l": {
                                    "en-US": "POST"
                                },
                                "v": "POST"
                            }
                        ]
                    }
                }
            },
            {
                "name": "api",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "youtube"
                                },
                                "v": "youtube"
                            }
                        ]
                    }
                }
            },
            {
                "name": "command",
                "type": "str",
                "value": "",
                "ui": {
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "liveBroadcasts.list"
                                },
                                "v": "liveBroadcasts.list"
                            }
                        ]
                    }
                }
            },
            {
                "name": "parameters",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "51db561c30740759",
        "type": "group",
        "z": "f8fea6023a301ee0",
        "name": "DeviceStatus",
        "style": {
            "fill": "#ffC000",
            "fill-opacity": "0.5",
            "label": true
        },
        "nodes": [
            "da884e1459a7a8e0",
            "123723926b7795ea",
            "4111b25606ece7d8",
            "74540f194819ab34",
            "312a6c7efa8b6ef5",
            "1e338aaf021a79b6",
            "048b7e74de58a31a"
        ],
        "x": 574,
        "y": 19
    },
    {
        "id": "7c08e0b6d3450d5d",
        "type": "group",
        "z": "e915b08ab287bdeb",
        "name": "Websockets In",
        "style": {
            "label": true
        },
        "nodes": [
            "9a8b7aace4b061c6",
            "e67c3192469c5192",
            "d45e30b812369e35",
            "a605650fb331de9a",
            "3626ebc4c4bffe91",
            "80ea315eb62839a1",
            "4144a2948ecfb511",
            "2d9667b4a531d4f4",
            "e9a31c9a038e6d5c",
            "536f6ce1c8cfa5f7",
            "67af7636dd1737d1"
        ],
        "x": 14,
        "y": 79
    },
    {
        "id": "fdb1eb8a87d5b6af",
        "type": "group",
        "z": "e915b08ab287bdeb",
        "name": "Websockets Out",
        "style": {
            "label": true
        },
        "nodes": [
            "d84a0a00959a50f9",
            "69ad925d5de737f5",
            "5f0de81e819e9db6",
            "e80a920c28d6a247"
        ],
        "x": 254,
        "y": 299
    },
    {
        "id": "86ce8d5c6c20572f",
        "type": "group",
        "z": "f8fea6023a301ee0",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "98a733c3598fe69e",
            "3bd03f026e2c3edd",
            "80ac9afb3219b342",
            "742a2b0775562c41",
            "563a3e66d11571e9",
            "d2402a830e630ef7",
            "6398a81e452a39a4",
            "2130b646128a1c83",
            "fbee0ad2eb659292"
        ],
        "x": 574,
        "y": 219
    },
    {
        "id": "965817fa60182c80",
        "type": "group",
        "z": "aa4f5cbbfcfb79f5",
        "name": "ATEM In/Out",
        "style": {
            "label": true
        },
        "nodes": [
            "84e15f3dc6e060d9",
            "d851632de60bfcde",
            "34fda454c96b7216",
            "b98ddab73c641b2d",
            "4e198a179a26c0d2",
            "63bfd215c7289939",
            "3d4d47570d31561b",
            "42f930d0cbe3cf84",
            "d386f3293ff33ade",
            "a13ec1bc1f4c6404",
            "07517ce4e6a9a393",
            "0d721bb37e3d1a18",
            "f7f35b038ad280c3",
            "5bf67800eb19fa01"
        ],
        "x": 14,
        "y": 19,
        "w": 772,
        "h": 362
    },
    {
        "id": "baa0a2bdfdfe3e1a",
        "type": "group",
        "z": "aa4f5cbbfcfb79f5",
        "name": "ATEM Commands",
        "style": {
            "label": true
        },
        "nodes": [
            "fe915c020679b857",
            "579b01e137260fd6",
            "6f1e1419c02f451f",
            "fcf85f2d33da4f03",
            "3f63f420269e5773",
            "c28fa2106dbacb04",
            "376725687f832957"
        ],
        "x": 14,
        "y": 399,
        "w": 642,
        "h": 162
    },
    {
        "id": "2eb22257679ef8d8",
        "type": "group",
        "z": "aa4f5cbbfcfb79f5",
        "name": "Levels",
        "style": {
            "label": true
        },
        "nodes": [
            "d32b6b30e5a9d5a5",
            "f914350169403e6f",
            "cd2d7c869e9a6bc6",
            "3b5cba49c16d3725",
            "3d06485952137eb4",
            "e76ee54f34f8e623",
            "405183639946664f",
            "8e66e44652bd437f",
            "c075fe0b835280ca",
            "4e97985703234fe3"
        ],
        "x": 894,
        "y": 654,
        "w": 792,
        "h": 307
    },
    {
        "id": "09f4d8872812293d",
        "type": "group",
        "z": "aa4f5cbbfcfb79f5",
        "name": "Functions",
        "style": {
            "label": true
        },
        "nodes": [
            "340ee86f124bd2b2",
            "74903d14bc9b7354",
            "75e09d7cb1d43efa",
            "6a791cc7460e1cf4",
            "a3f281667a052c57",
            "9eddeab531bf6c33",
            "12dfd0709a80c012",
            "04c5a73c044be371",
            "8356a53e8b2ef262",
            "53e13f88e485647f",
            "64c8270e95c0f3cc"
        ],
        "x": 894,
        "y": 19,
        "w": 1212,
        "h": 568
    },
    {
        "id": "4a4e84045c7a1488",
        "type": "group",
        "z": "aa4f5cbbfcfb79f5",
        "name": "State Change",
        "style": {
            "label": true
        },
        "nodes": [
            "5eb9864b07968b67",
            "07e2c46c2c761f89",
            "4206f18feb017fe9",
            "942d55afc41e21d1",
            "ce65ddb7fac38343",
            "520091c1457d26d6",
            "e7415654d2f0a985"
        ],
        "x": 894,
        "y": 979,
        "w": 612,
        "h": 162
    },
    {
        "id": "efd77fa9b8e44782",
        "type": "group",
        "z": "f8fea6023a301ee0",
        "name": "Query",
        "style": {
            "label": true
        },
        "nodes": [
            "64487f433c4fbf17",
            "1bb3394fe6f2f3ab",
            "89dc83d5d24784e0",
            "5356bf6d625cceb5",
            "2758a3326ea822a0",
            "ad1b8c8c985c04ed",
            "c1dce5033f113a88",
            "3cacf97ad9a2eaac",
            "e1d2c5a284b493ff",
            "b8095c7bd3de23ba",
            "44a330bfb8989d36",
            "8651dcf86ee53b07",
            "57278265d4c1b1d7",
            "81da01b54b267aa2"
        ],
        "x": 374,
        "y": 719
    },
    {
        "id": "46c345a31908bb05",
        "type": "group",
        "z": "f8fea6023a301ee0",
        "name": "Device-Input-Rltn",
        "style": {
            "label": true
        },
        "nodes": [
            "450097be76ca821a",
            "f5aacd98db36938e",
            "82a1aaaeb5c8b918",
            "1f4512e33ed82ed5",
            "513f280a17b07d8a",
            "ee85afb0f14edd21",
            "0c8cbe68431cb7dc",
            "267bd53aaaf8a1fc",
            "7daf0110ba276c84",
            "e8718d4ffacc6774",
            "60832ebcd0400c2a",
            "a3c15cf98f77bb99",
            "acb805d9d2b848b6",
            "bb5c99c8df1c9503",
            "6f734348ea8a3590",
            "00e4c5a87d72283f",
            "7c7f90e8be0098a7",
            "b2274d8e755b20a2"
        ],
        "x": 54,
        "y": 459
    },
    {
        "id": "de2c35bbd93c6fab",
        "type": "group",
        "z": "aa4f5cbbfcfb79f5",
        "name": "Program",
        "style": {
            "stroke": "#ff3f3f",
            "label": true
        },
        "nodes": [
            "17757c66213d227e",
            "ca774d7e86fb548c",
            "bb27c18348ece645",
            "9fe4c4180f1dcd19",
            "ba0629e35d2423d8"
        ],
        "x": 1514,
        "y": 59,
        "w": 212,
        "h": 242
    },
    {
        "id": "a3f281667a052c57",
        "type": "group",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "Preview",
        "style": {
            "stroke": "#c8e7a7",
            "label": true
        },
        "nodes": [
            "f31ce8909feec073",
            "9bf6de19c2119f68",
            "efcac9f6af5abf55",
            "b551be3bbed0a061",
            "8106dab6f382b38f"
        ],
        "x": 1514,
        "y": 319,
        "w": 212,
        "h": 242
    },
    {
        "id": "ad3a61199ba7f675",
        "type": "junction",
        "z": "20e8e8ac36f6e0b9",
        "x": 1020,
        "y": 180,
        "wires": [
            [
                "f6c16d68f23eaf32",
                "adac352fc171ebda"
            ]
        ]
    },
    {
        "id": "e546335e2455721a",
        "type": "junction",
        "z": "20e8e8ac36f6e0b9",
        "x": 780,
        "y": 220,
        "wires": [
            [
                "bf1c6431df82c029",
                "5bea3da1bc4bd4c1"
            ]
        ]
    },
    {
        "id": "b1e39572bc86a88d",
        "type": "junction",
        "z": "20e8e8ac36f6e0b9",
        "x": 380,
        "y": 220,
        "wires": [
            [
                "e546335e2455721a"
            ]
        ]
    },
    {
        "id": "6958e2e45d1b032d",
        "type": "junction",
        "z": "f8fea6023a301ee0",
        "x": 360,
        "y": 280,
        "wires": [
            [
                "3bd03f026e2c3edd"
            ]
        ]
    },
    {
        "id": "e6b90f84c45f2369",
        "type": "junction",
        "z": "f8fea6023a301ee0",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "123723926b7795ea",
                "74540f194819ab34"
            ]
        ]
    },
    {
        "id": "8651dcf86ee53b07",
        "type": "junction",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "x": 800,
        "y": 840,
        "wires": [
            [
                "89dc83d5d24784e0"
            ]
        ]
    },
    {
        "id": "fbb1699a2aa97dc0",
        "type": "junction",
        "z": "20e8e8ac36f6e0b9",
        "x": 380,
        "y": 340,
        "wires": [
            [
                "8de2ce0d7fd6475a"
            ]
        ]
    },
    {
        "id": "0d721bb37e3d1a18",
        "type": "junction",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "x": 560,
        "y": 260,
        "wires": [
            [
                "8fa009c4bc8b209f"
            ]
        ]
    },
    {
        "id": "f7f35b038ad280c3",
        "type": "junction",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "c3af36c483811a15"
            ]
        ]
    },
    {
        "id": "5bf67800eb19fa01",
        "type": "junction",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "x": 560,
        "y": 300,
        "wires": [
            [
                "aed80c037a073083"
            ]
        ]
    },
    {
        "id": "8fa009c4bc8b209f",
        "type": "junction",
        "z": "aa4f5cbbfcfb79f5",
        "x": 820,
        "y": 260,
        "wires": [
            [
                "340ee86f124bd2b2"
            ]
        ]
    },
    {
        "id": "c3af36c483811a15",
        "type": "junction",
        "z": "aa4f5cbbfcfb79f5",
        "x": 820,
        "y": 280,
        "wires": [
            [
                "8e66e44652bd437f"
            ]
        ]
    },
    {
        "id": "aed80c037a073083",
        "type": "junction",
        "z": "aa4f5cbbfcfb79f5",
        "x": 820,
        "y": 300,
        "wires": [
            [
                "ce65ddb7fac38343"
            ]
        ]
    },
    {
        "id": "8e66e44652bd437f",
        "type": "junction",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "x": 920,
        "y": 800,
        "wires": [
            [
                "405183639946664f",
                "d32b6b30e5a9d5a5"
            ]
        ]
    },
    {
        "id": "ce65ddb7fac38343",
        "type": "junction",
        "z": "aa4f5cbbfcfb79f5",
        "g": "4a4e84045c7a1488",
        "x": 920,
        "y": 1060,
        "wires": [
            [
                "5eb9864b07968b67",
                "07e2c46c2c761f89"
            ]
        ]
    },
    {
        "id": "57278265d4c1b1d7",
        "type": "junction",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "x": 1380,
        "y": 880,
        "wires": [
            [
                "81da01b54b267aa2"
            ]
        ]
    },
    {
        "id": "81da01b54b267aa2",
        "type": "junction",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "x": 400,
        "y": 880,
        "wires": [
            [
                "3cacf97ad9a2eaac"
            ]
        ]
    },
    {
        "id": "00e4c5a87d72283f",
        "type": "junction",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "x": 1360,
        "y": 560,
        "wires": [
            [
                "7c7f90e8be0098a7"
            ]
        ]
    },
    {
        "id": "7c7f90e8be0098a7",
        "type": "junction",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "x": 260,
        "y": 600,
        "wires": [
            [
                "450097be76ca821a"
            ]
        ]
    },
    {
        "id": "c66f539a9e1f3c90",
        "type": "websocket-listener",
        "path": "/ws/tally",
        "wholemsg": "false"
    },
    {
        "id": "f3b2cb2dfae64c41",
        "type": "sqlitedb",
        "db": "/data/sqlite",
        "mode": "RWC"
    },
    {
        "id": "2e15b65c957b4eeb",
        "type": "atem-connection-connection",
        "name": "",
        "ipAddress": "192.168.13.100",
        "debug": "no"
    },
    {
        "id": "d658deadbccc1573",
        "type": "flexdash dashboard",
        "port": 80,
        "ioOpts": "{}",
        "path": "/",
        "redServer": true,
        "saveConfig": true,
        "allOrigins": false,
        "name": "FlexDash",
        "fd_children": ",fbf14ded89b5c17b,bc495d8c81682f11,7a39d9e4b70f06e4,3cd8203cf78d881f,f5c72e82976e5905"
    },
    {
        "id": "fbf14ded89b5c17b",
        "type": "flexdash tab",
        "name": "Home Tab",
        "icon": "mdi-view-dashboard",
        "title": "Home",
        "fd_children": ",165e5979ee663beb,80d93b05a48cf93d",
        "fd": "d658deadbccc1573"
    },
    {
        "id": "165e5979ee663beb",
        "type": "flexdash container",
        "name": "Preview Grid (12)",
        "title": "Preview",
        "kind": "StdGrid",
        "fd_children": ",983378a3c34961e8,5894d793207c6186,5eea3c7f1a4cc21a,5867c05f24ae91dc,e433fcd4dbe28308",
        "tab": "fbf14ded89b5c17b",
        "min_cols": 1,
        "max_cols": 12,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "5eea3c7f1a4cc21a",
        "type": "flexdash container",
        "name": "Web Channel Panel",
        "title": "",
        "kind": "Panel",
        "fd_children": ",253191bf13185c9e,72ef7ea728643ca8",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "165e5979ee663beb",
        "solid": false,
        "cols": 3,
        "rows": 4
    },
    {
        "id": "5867c05f24ae91dc",
        "type": "flexdash container",
        "name": "YouTube Pannel",
        "kind": "Panel",
        "fd_children": ",4dee4ffb0d2aa360,ab7fb824d4408a87,299c50a018db9771",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "165e5979ee663beb",
        "solid": false,
        "cols": 3,
        "rows": 4
    },
    {
        "id": "e433fcd4dbe28308",
        "type": "flexdash container",
        "name": "Facebook Panel",
        "kind": "Panel",
        "fd_children": ",bb4ffeb7cd0a61ab,3c20e9850f3c18bc,3ff71c93b4cc3428",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "165e5979ee663beb",
        "solid": false,
        "cols": 3,
        "rows": 4
    },
    {
        "id": "80d93b05a48cf93d",
        "type": "flexdash container",
        "name": "Resi Studio Grid",
        "title": "Resi Studio",
        "kind": "StdGrid",
        "fd_children": ",1e37b1fa36b7808f",
        "tab": "fbf14ded89b5c17b",
        "min_cols": 1,
        "max_cols": 12,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "983378a3c34961e8",
        "type": "flexdash container",
        "name": "Tally Send Panel",
        "kind": "Panel",
        "fd_children": ",edfa8e4da0965c65,fd863f9fd1a98347",
        "tab": "",
        "min_cols": 2,
        "max_cols": 2,
        "unicast": "ignore",
        "parent": "165e5979ee663beb",
        "solid": false,
        "cols": 1,
        "rows": 4
    },
    {
        "id": "5894d793207c6186",
        "type": "flexdash container",
        "name": "Tally Return Panel",
        "kind": "Panel",
        "fd_children": ",27b954638b944006",
        "tab": "",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "165e5979ee663beb",
        "solid": false,
        "cols": 1,
        "rows": 4
    },
    {
        "id": "f5c72e82976e5905",
        "type": "flexdash tab",
        "name": "Query Tab",
        "icon": "mdi-database-search",
        "title": "Query",
        "fd_children": ",a0392b7d8d86b175",
        "fd": "d658deadbccc1573"
    },
    {
        "id": "a0392b7d8d86b175",
        "type": "flexdash container",
        "name": "Query Grid",
        "kind": "StdGrid",
        "fd_children": ",3cacf97ad9a2eaac,44a330bfb8989d36,e1d2c5a284b493ff,b8095c7bd3de23ba",
        "tab": "f5c72e82976e5905",
        "min_cols": 1,
        "max_cols": 6,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "7a39d9e4b70f06e4",
        "type": "flexdash tab",
        "name": "Device Status Tab",
        "icon": "mdi-devices",
        "title": "Device Status",
        "fd_children": ",c8f860da1dd12edb",
        "fd": "d658deadbccc1573"
    },
    {
        "id": "c8f860da1dd12edb",
        "type": "flexdash container",
        "name": "Device Status Grid",
        "title": "Device Status",
        "kind": "StdGrid",
        "fd_children": ",048b7e74de58a31a,1e338aaf021a79b6,fbee0ad2eb659292",
        "tab": "7a39d9e4b70f06e4",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "3cd8203cf78d881f",
        "type": "flexdash tab",
        "name": "Config Tab",
        "icon": "mdi-cog",
        "title": "Config",
        "fd_children": ",3c67b4bef73a12a7",
        "fd": "d658deadbccc1573"
    },
    {
        "id": "3c67b4bef73a12a7",
        "type": "flexdash container",
        "name": "Config Grid",
        "kind": "StdGrid",
        "fd_children": ",f5aacd98db36938e,1f4512e33ed82ed5,7daf0110ba276c84,e8718d4ffacc6774,60832ebcd0400c2a",
        "tab": "3cd8203cf78d881f",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "bc495d8c81682f11",
        "type": "flexdash tab",
        "name": "ATEM Tab",
        "icon": "mdi-video-switch-outline",
        "title": "ATEM",
        "fd_children": ",ce5b934c6ca52178,93644a619e6da4fd,0ec0bf893390ec62",
        "fd": "d658deadbccc1573"
    },
    {
        "id": "ce5b934c6ca52178",
        "type": "flexdash container",
        "name": "ATEM Program Grid",
        "title": "Program",
        "kind": "StdGrid",
        "fd_children": ",17757c66213d227e,ca774d7e86fb548c,bb27c18348ece645,9fe4c4180f1dcd19,ba0629e35d2423d8",
        "tab": "bc495d8c81682f11",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "93644a619e6da4fd",
        "type": "flexdash container",
        "name": "ATEM Preview Grid",
        "title": "Preview",
        "kind": "StdGrid",
        "fd_children": ",f31ce8909feec073,9bf6de19c2119f68,efcac9f6af5abf55,b551be3bbed0a061,8106dab6f382b38f",
        "tab": "bc495d8c81682f11",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "0ec0bf893390ec62",
        "type": "flexdash container",
        "name": "ATEM Audio Grid",
        "kind": "StdGrid",
        "fd_children": ",4e97985703234fe3,c075fe0b835280ca,520091c1457d26d6,e7415654d2f0a985",
        "tab": "bc495d8c81682f11",
        "min_cols": 1,
        "max_cols": 20,
        "unicast": "ignore",
        "parent": "",
        "solid": false,
        "cols": 1,
        "rows": 1
    },
    {
        "id": "ae3bb5af57217834",
        "type": "function",
        "z": "1b40ef83a0652010",
        "name": "Refresh Token",
        "func": "var Google_refresh = global.get('Google_refresh');\n\nmsg.payload ={\n            \"grant_type\": \"refresh_token\",\n            \"client_id\": env.get(\"Client_id\"),\n            \"client_secret\": env.get(\"Secret\"),\n            \"refresh_token\": Google_refresh\n        }\n\nmsg.headers = {};\nmsg.headers['Accept'] = \"application/json\";\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['Cache-Control'] = 'no-cache';\n\nmsg.method = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "be36287ea0b3eb53"
            ]
        ]
    },
    {
        "id": "be36287ea0b3eb53",
        "type": "http request",
        "z": "1b40ef83a0652010",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://oauth2.googleapis.com/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 570,
        "y": 80,
        "wires": [
            [
                "89eff7bbb77b98c4"
            ]
        ]
    },
    {
        "id": "89eff7bbb77b98c4",
        "type": "function",
        "z": "1b40ef83a0652010",
        "name": "Save OAuth Tokens",
        "func": "if (msg.payload.access_token) {\n    global.set('Google_token', msg.payload.access_token);\n    //global.set('Google_refresh', msg.payload.refresh_token);\n    Time = new Date()\n    msg.payload = \"Google Access Granted \" + Time;\n    \n} else {\n    msg.payload = \"Google Authorization error.\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cc666f64bb91c238",
        "type": "http in",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "url": "/Google/oauth2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "08ecd8469fb9fe7c"
            ]
        ]
    },
    {
        "id": "9127efc1faccdd28",
        "type": "http response",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "a446508ea873a530",
        "type": "template",
        "z": "c516bb43d26b1e4d",
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <style>\n.button {\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n\n.button2 {background-color: #008CBA;} /* Blue */\n</style>\n    </head>\n    <body>\n        <h1>Google Calendar Access Granted, click Continue</h1>\n       <a href=\"{{payload}}\" target=\"_parent\"><button class=\"button button2\">Continue</button></a>\n    </body>\n</html>",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "9127efc1faccdd28"
            ]
        ]
    },
    {
        "id": "4bbcc28955c3b685",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Save OAuth Tokens",
        "func": "if (msg.payload.access_token) {\n    global.set('Google_token', msg.payload.access_token);\n    global.set('Google_refresh', msg.payload.refresh_token);\n    Time = new Date()\n    msg.result = \"Google Access Granted \" + Time;\n    \n} else {\n    msg.result = \"Google Authorization error.\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9318f97001dde25b",
        "type": "http request",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://oauth2.googleapis.com/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 590,
        "y": 80,
        "wires": [
            [
                "4bbcc28955c3b685",
                "9a11e2cee582a63b"
            ]
        ]
    },
    {
        "id": "08ecd8469fb9fe7c",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Google Oauth2",
        "func": "msg.payload ={\n            \"grant_type\": \"authorization_code\",\n            \"client_id\": env.get(\"Client_id\"),\n            \"client_secret\": env.get(\"Secret\"),\n            \"code\": msg.payload.code,\n            \"redirect_uri\": env.get(\"Redirect\")\n        }\n\nmsg.headers = {};\nmsg.headers['Accept'] = \"application/json\";\nmsg.headers['content-type'] = 'application/json';\nmsg.headers['Cache-Control'] = 'no-cache';\n\nmsg.method = \"POST\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            [
                "9318f97001dde25b"
            ]
        ]
    },
    {
        "id": "9a11e2cee582a63b",
        "type": "switch",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "property": "payload.access_token",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 180,
        "wires": [
            [
                "35a8d42d08ace432"
            ],
            [
                "cb4f3c3b1f8295b1"
            ]
        ]
    },
    {
        "id": "2efeedef766408a3",
        "type": "template",
        "z": "c516bb43d26b1e4d",
        "name": "page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<html>\n    <head>\n        <style>\n.button {\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n  margin: 4px 2px;\n  cursor: pointer;\n}\n\n.button2 {background-color: #008CBA;} /* Blue */\n</style>\n    </head>\n    <body>\n        <h1>Google Authorization error</h1>\n        <a href=\"{{payload}}\" target=\"_parent\"><button class=\"button button2\">Return</button></a>\n    </body>\n</html>",
        "x": 590,
        "y": 200,
        "wires": [
            [
                "9127efc1faccdd28"
            ]
        ]
    },
    {
        "id": "0e032ab54e41c7f9",
        "type": "function",
        "z": "c516bb43d26b1e4d",
        "name": "Generate  URL",
        "func": "msg.payload = \"https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A//www.googleapis.com/auth/\" + env.get(\"Scope\") + \"&access_type=offline&prompt=consent&include_granted_scopes=true&response_type=code&redirect_uri=\" + env.get(\"Redirect\") +\"&client_id=\" + env.get(\"Client_id\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "cb4f3c3b1f8295b1",
        "type": "change",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Dashboard",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 200,
        "wires": [
            [
                "2efeedef766408a3"
            ]
        ]
    },
    {
        "id": "35a8d42d08ace432",
        "type": "change",
        "z": "c516bb43d26b1e4d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Dashboard",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "a446508ea873a530"
            ]
        ]
    },
    {
        "id": "22f8e2c3ee56ff61",
        "type": "http request",
        "z": "5686e1527b566b3a",
        "name": "Google API",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Authorization",
                "keyValue": "",
                "valueType": "msg",
                "valueValue": "authorization"
            }
        ],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "bd403d72769fc27c",
                "90a8d211d4705e7d"
            ]
        ]
    },
    {
        "id": "d551ba8719838517",
        "type": "function",
        "z": "5686e1527b566b3a",
        "name": "function",
        "func": "var method = msg.method || \"GET\";\nvar url = \"https://www.googleapis.com\"\n\nswitch (msg.api) {\n    case \"youtube\":\n        url = url + \"/youtube/v3\";\n        break;\n}\n\nswitch (msg.command) {\n    case \"liveBroadcasts.list\":\n        url = url + \"/liveBroadcasts\" + msg.parameters;\n        msg.topic = \"liveBroadcasts.list\";\n        break;\n}\n\nmsg.method = method;\nmsg.url = url;\nmsg.authorization = \"Bearer \" + global.get(\"Google_token\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 100,
        "wires": [
            [
                "22f8e2c3ee56ff61"
            ]
        ]
    },
    {
        "id": "bd403d72769fc27c",
        "type": "debug",
        "z": "5686e1527b566b3a",
        "d": true,
        "name": "debug.googleApi",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 60,
        "wires": []
    },
    {
        "id": "90a8d211d4705e7d",
        "type": "change",
        "z": "5686e1527b566b3a",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "api",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "authorization",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "command",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "method",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "url",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "responseUrl",
                "pt": "msg"
            },
            {
                "t": "delete",
                "p": "parameters",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "fe915c020679b857",
        "type": "inject",
        "z": "aa4f5cbbfcfb79f5",
        "g": "baa0a2bdfdfe3e1a",
        "name": "trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "6f1e1419c02f451f"
            ]
        ]
    },
    {
        "id": "579b01e137260fd6",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "baa0a2bdfdfe3e1a",
        "name": "getState",
        "func": "let msg2 = {\n    topic: \"getState\",\n    payload: {}\n}\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "fcf85f2d33da4f03"
            ]
        ]
    },
    {
        "id": "6f1e1419c02f451f",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "baa0a2bdfdfe3e1a",
        "name": "startFairlightMixerSendLevels",
        "func": "let msg2 = {\n    topic: \"directAction\",\n    payload: {\n        function: \"startFairlightMixerSendLevels\",\n        parameters: []\n    }\n}\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 440,
        "wires": [
            [
                "fcf85f2d33da4f03"
            ]
        ]
    },
    {
        "id": "a13ec1bc1f4c6404",
        "type": "catch",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "07517ce4e6a9a393"
            ]
        ]
    },
    {
        "id": "07517ce4e6a9a393",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 310,
        "y": 60,
        "wires": []
    },
    {
        "id": "fcf85f2d33da4f03",
        "type": "link out",
        "z": "aa4f5cbbfcfb79f5",
        "g": "baa0a2bdfdfe3e1a",
        "name": "To ATEM",
        "mode": "link",
        "links": [
            "d851632de60bfcde"
        ],
        "x": 570,
        "y": 480,
        "wires": [],
        "l": true
    },
    {
        "id": "3f63f420269e5773",
        "type": "inject",
        "z": "aa4f5cbbfcfb79f5",
        "g": "baa0a2bdfdfe3e1a",
        "name": "trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 520,
        "wires": [
            [
                "579b01e137260fd6"
            ]
        ]
    },
    {
        "id": "c28fa2106dbacb04",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "baa0a2bdfdfe3e1a",
        "name": "stopFairlightMixerSendLevels",
        "func": "let msg2 = {\n    topic: \"directAction\",\n    payload: {\n        function: \"stopFairlightMixerSendLevels\",\n        parameters: []\n    }\n}\nreturn msg2;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 480,
        "wires": [
            [
                "fcf85f2d33da4f03"
            ]
        ]
    },
    {
        "id": "376725687f832957",
        "type": "inject",
        "z": "aa4f5cbbfcfb79f5",
        "g": "baa0a2bdfdfe3e1a",
        "name": "trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "c28fa2106dbacb04"
            ]
        ]
    },
    {
        "id": "d32b6b30e5a9d5a5",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "name": "fairlightLevels",
        "func": "let newMsg = {};\nlet leftLevel = msg.payload.levels.leftLevel;\nlet rightLevel = msg.payload.levels.rightLevel;\nlet maxLevel = Math.max(leftLevel, rightLevel);\nlet payload = maxLevel / 100;\nlet channel = \"Master\";\nlet input = msg.payload.input;\n\nnewMsg.input = input;\nnewMsg.payload = payload;\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "cd2d7c869e9a6bc6"
            ]
        ]
    },
    {
        "id": "f914350169403e6f",
        "type": "switch",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "name": "Channel",
        "property": "input",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "master",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "10",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2001",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2002",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1301",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1401",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 16,
        "x": 1320,
        "y": 800,
        "wires": [
            [
                "3b5cba49c16d3725",
                "c075fe0b835280ca"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725"
            ],
            [
                "3b5cba49c16d3725",
                "4e97985703234fe3"
            ],
            [
                "3d06485952137eb4"
            ]
        ],
        "outputLabels": [
            "Master",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "2001",
            "2002",
            "1301",
            "1401",
            "Otherwise"
        ]
    },
    {
        "id": "cd2d7c869e9a6bc6",
        "type": "rbe",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1190,
        "y": 800,
        "wires": [
            [
                "f914350169403e6f"
            ]
        ]
    },
    {
        "id": "3b5cba49c16d3725",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "name": "debug Channel",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 1540,
        "y": 800,
        "wires": []
    },
    {
        "id": "3d06485952137eb4",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "name": "debug Otherwise",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 1550,
        "y": 920,
        "wires": []
    },
    {
        "id": "e76ee54f34f8e623",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "d": true,
        "g": "2eb22257679ef8d8",
        "name": "fairlightLevels_OLD",
        "func": "let newMsg = [];\n\nfor (let i in msg.payload.pathToChange) {\n    \n    let strPath = msg.payload.pathToChange[i];\n    \n    // Early Exit\n    if (strPath == undefined) {return};\n    if (!strPath.startsWith(\"fairlight.\")) {return};\n    if (!strPath.endsWith(\".levels\")) {return};\n    \n    // Master\n    if (strPath === \"fairlight.master.levels\") {\n        let leftLevel = msg.payload.state.fairlight.master.levels.leftLevel;\n        let rightLevel = msg.payload.state.fairlight.master.levels.rightLevel;\n        let maxLevel = Math.max(leftLevel, rightLevel);\n        let payload = maxLevel / 100;\n        let channel = \"Master\";\n        let topic = strPath;\n        newMsg.push({ payload: payload, channel: channel, topic: topic});\n    }\n    \n    // Inputs\n    if (strPath.startsWith(\"fairlight.inputs.\") && strPath.endsWith(\".levels\")) {\n        let pathPart = strPath.split(\".\");\n        let inputPart = msg.payload.state.fairlight.inputs[pathPart[2]];\n        let sourcePart = inputPart.sources[pathPart[4]];\n        let leftLevel = sourcePart.levels.leftLevel;\n        let rightLevel = sourcePart.levels.rightLevel;\n        let maxLevel = Math.max(leftLevel, rightLevel);\n        let payload = maxLevel / 100;\n        let channel = pathPart[2];\n        let topic = strPath;\n        newMsg.push({ payload: payload, channel: channel, topic: topic });\n    }\n\n}\n\nreturn [newMsg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "84e15f3dc6e060d9",
        "type": "switch",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "switch \"topic\"",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connection",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "info",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "debug",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "function",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "levelChange",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "stateChange",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 400,
        "y": 220,
        "wires": [
            [
                "d386f3293ff33ade"
            ],
            [
                "d386f3293ff33ade"
            ],
            [
                "3d4d47570d31561b"
            ],
            [
                "42f930d0cbe3cf84"
            ],
            [
                "63bfd215c7289939"
            ],
            [
                "0d721bb37e3d1a18"
            ],
            [
                "f7f35b038ad280c3"
            ],
            [
                "5bf67800eb19fa01"
            ],
            [
                "b98ddab73c641b2d"
            ]
        ],
        "outputLabels": [
            "connection",
            "info",
            "error",
            "debug",
            "command",
            "function",
            "levelChange",
            "stateChange",
            "otherwise"
        ]
    },
    {
        "id": "d851632de60bfcde",
        "type": "link in",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "ATEM In",
        "links": [
            "7f035ac56cbb87ab",
            "fcf85f2d33da4f03",
            "53e13f88e485647f"
        ],
        "x": 100,
        "y": 220,
        "wires": [
            [
                "34fda454c96b7216"
            ]
        ],
        "l": true
    },
    {
        "id": "34fda454c96b7216",
        "type": "atem-connection-atem",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "",
        "connection": "2e15b65c957b4eeb",
        "x": 230,
        "y": 220,
        "wires": [
            [
                "84e15f3dc6e060d9",
                "4e198a179a26c0d2"
            ]
        ]
    },
    {
        "id": "b98ddab73c641b2d",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "ATEM Otherwise",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 650,
        "y": 340,
        "wires": []
    },
    {
        "id": "4e198a179a26c0d2",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "ATEM",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 370,
        "y": 320,
        "wires": []
    },
    {
        "id": "63bfd215c7289939",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "debug Command",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 650,
        "y": 220,
        "wires": []
    },
    {
        "id": "340ee86f124bd2b2",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "function chg",
        "func": "let newMsg = {};\nswitch (msg.payload.function) {\n    case \"previewInput\":\n    case \"programInput\":\n        newMsg = {\n            topic: msg.payload.function,\n            payload: {\n                ME: msg.payload.data.ME.index,\n                inputId: msg.payload.data.input.inputId,\n                pathToChange: msg.payload.pathToChange\n            }\n        };\n        break;\n    default:\n        newMsg = {\n            topic: msg.payload.function,\n            payload: msg.payload.data\n        }\n        break;\n}\n\nreturn [newMsg,msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 60,
        "wires": [
            [
                "74903d14bc9b7354",
                "6a791cc7460e1cf4"
            ],
            [
                "6a791cc7460e1cf4"
            ]
        ],
        "outputLabels": [
            "newMsg",
            "msg"
        ]
    },
    {
        "id": "74903d14bc9b7354",
        "type": "switch",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "previewInput",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "programInput",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1170,
        "y": 80,
        "wires": [
            [
                "75e09d7cb1d43efa",
                "9eddeab531bf6c33"
            ],
            [
                "75e09d7cb1d43efa",
                "12dfd0709a80c012"
            ],
            [
                "64c8270e95c0f3cc"
            ]
        ],
        "outputLabels": [
            "previewInput",
            "programInput",
            "otherwise"
        ]
    },
    {
        "id": "75e09d7cb1d43efa",
        "type": "link out",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "ATEM to Tally",
        "mode": "link",
        "links": [
            "e17695c1d1926b5b"
        ],
        "x": 1400,
        "y": 80,
        "wires": [],
        "l": true
    },
    {
        "id": "6a791cc7460e1cf4",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "function chg",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 120,
        "wires": []
    },
    {
        "id": "405183639946664f",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "name": "debug levelChange",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 840,
        "wires": []
    },
    {
        "id": "d386f3293ff33ade",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "ATEM Normal",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "42f930d0cbe3cf84",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "ATEM Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 630,
        "y": 140,
        "wires": []
    },
    {
        "id": "3d4d47570d31561b",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "965817fa60182c80",
        "name": "ATEM Error",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 640,
        "y": 100,
        "wires": []
    },
    {
        "id": "5eb9864b07968b67",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "4a4e84045c7a1488",
        "name": "debug stateChange",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 1050,
        "y": 1080,
        "wires": []
    },
    {
        "id": "07e2c46c2c761f89",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "4a4e84045c7a1488",
        "name": "stateChange",
        "func": "function linearInterpolation(x, x0, x1, y0, y1) {\n    // Ensure x is within the range [x0, x1]\n    //if (x < x0 || x > x1) {\n    //    throw new Error('The value of x is outside the range of interpolation');\n    //}\n    // Calculate the interpolated value\n    const y = y0 + ((y1 - y0) / (x1 - x0)) * (x - x0);\n    return y;\n}\n\nlet pathToChange = msg.payload.pathToChange;\nlet newMsg = [];\nlet newPayload = {};\nlet newTopic = \"\";\n\n\n//for (let i in pathToChange) {\n    switch (pathToChange[0]) {\n        case \"fairlight.inputs.1401.sources.-65280.properties\": {\n            // TRS Fader\n            newTopic = pathToChange[0];\n            let faderGain = msg.payload.state.fairlight.inputs[\"1401\"].sources[\"-65280\"].properties.faderGain;\n            let faderGain2 = linearInterpolation(faderGain, -10000, 1000, 0, 110);\n            let faderGain3 = Math.pow(faderGain2, 2) / 100;\n            newPayload = faderGain3;\n            newMsg.push({ topic: newTopic, payload: newPayload});\n            break;\n        }\n        case \"fairlight.master\":\n            newTopic = pathToChange[0];\n            let faderGain = msg.payload.state.fairlight.master.properties.faderGain;\n            let faderGain2 = linearInterpolation(faderGain, -10000, 1000, 0, 110);\n            let faderGain3 = Math.pow(faderGain2, 2) / 100;\n            newPayload = faderGain3;\n            newMsg.push({ topic: newTopic, payload: newPayload });\n        default:\n            break;\n    }\n//}\n\nreturn [newMsg];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1040,
        "wires": [
            [
                "4206f18feb017fe9"
            ]
        ]
    },
    {
        "id": "4206f18feb017fe9",
        "type": "switch",
        "z": "aa4f5cbbfcfb79f5",
        "g": "4a4e84045c7a1488",
        "name": "topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "fairlight.inputs.1401.sources.-65280.properties",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "fairlight.master",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1230,
        "y": 1040,
        "wires": [
            [
                "942d55afc41e21d1",
                "520091c1457d26d6"
            ],
            [
                "942d55afc41e21d1",
                "e7415654d2f0a985"
            ],
            []
        ],
        "outputLabels": [
            "TRS Fader",
            "Master Fader",
            "otherwise"
        ]
    },
    {
        "id": "942d55afc41e21d1",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "4a4e84045c7a1488",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 1020,
        "wires": []
    },
    {
        "id": "9eddeab531bf6c33",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "function",
        "func": "let defaultColor = \"white\";\n\nlet pvw1 = { color: defaultColor };\nlet pvw2 = { color: defaultColor };\nlet pvw3 = { color: defaultColor };\nlet pvw4 = { color: defaultColor };\nlet pvw5 = { color: defaultColor };\n\nlet topic = msg.topic;\nlet inputId = msg.payload.inputId;\n\nswitch (true) {\n    case (topic === \"previewInput\" && inputId == \"1\"):\n        pvw1 = { color: \"green\" };\n        break;\n    case (topic === \"previewInput\" && inputId == \"2\"):\n        pvw2 = { color: \"green\" };\n        break;\n    case (topic === \"previewInput\" && inputId == \"3\"):\n        pvw3 = { color: \"green\" };\n        break;\n    case (topic === \"previewInput\" && inputId == \"4\"):\n        pvw4 = { color: \"green\" };\n        break;\n    case (topic === \"previewInput\" && inputId == \"5\"):\n        pvw5 = { color: \"green\" };\n        break;\n    default:\n        break;\n}\n\nreturn [pvw1, pvw2, pvw3, pvw4, pvw5];\n\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 440,
        "wires": [
            [
                "f31ce8909feec073"
            ],
            [
                "efcac9f6af5abf55"
            ],
            [
                "b551be3bbed0a061"
            ],
            [
                "8106dab6f382b38f"
            ],
            [
                "9bf6de19c2119f68"
            ]
        ]
    },
    {
        "id": "12dfd0709a80c012",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "function",
        "func": "let defaultColor = \"white\";\n\nlet pgm1 = { color: defaultColor };\nlet pgm2 = { color: defaultColor };\nlet pgm3 = { color: defaultColor };\nlet pgm4 = { color: defaultColor };\nlet pgm5 = { color: defaultColor };\n\nlet topic = msg.topic;\nlet inputId = msg.payload.inputId;\n\nswitch (true) {\n    case (topic === \"programInput\" && inputId == \"1\"):\n        pgm1 = { color: \"red\" };\n        break;\n    case (topic === \"programInput\" && inputId == \"2\"):\n        pgm2 = { color: \"red\" };\n        break;\n    case (topic === \"programInput\" && inputId == \"3\"):\n        pgm3 = { color: \"red\" };\n        break;\n    case (topic === \"programInput\" && inputId == \"4\"):\n        pgm4 = { color: \"red\" };\n        break;\n    case (topic === \"programInput\" && inputId == \"5\"):\n        pgm5 = { color: \"red\" };\n        break;\n    default:\n        break;\n}\n\nreturn [pgm1,pgm2,pgm3,pgm4,pgm5];\n\n",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 180,
        "wires": [
            [
                "17757c66213d227e"
            ],
            [
                "bb27c18348ece645"
            ],
            [
                "9fe4c4180f1dcd19"
            ],
            [
                "ba0629e35d2423d8"
            ],
            [
                "ca774d7e86fb548c"
            ]
        ]
    },
    {
        "id": "04c5a73c044be371",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "changePreviewInput",
        "func": "let newMsg = {\n    topic: \"changePreviewInput\",\n    payload: {ME:0, inputId: msg.payload}\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 440,
        "wires": [
            [
                "53e13f88e485647f"
            ]
        ]
    },
    {
        "id": "8356a53e8b2ef262",
        "type": "function",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "changeProgramInput",
        "func": "let newMsg = {\n    topic: \"changeProgramInput\",\n    payload: {ME:0, inputId: msg.payload}\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 180,
        "wires": [
            [
                "53e13f88e485647f"
            ]
        ]
    },
    {
        "id": "53e13f88e485647f",
        "type": "link out",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "To ATEM",
        "mode": "link",
        "links": [
            "d851632de60bfcde"
        ],
        "x": 2065,
        "y": 320,
        "wires": []
    },
    {
        "id": "f31ce8909feec073",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "a3f281667a052c57",
        "fd_container": "93644a619e6da4fd",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam1 CTR [1]",
        "title": "Cam1 CTR",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 1,
        "icon": null,
        "x": 1620,
        "y": 360,
        "wires": [
            [
                "04c5a73c044be371"
            ]
        ]
    },
    {
        "id": "9bf6de19c2119f68",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "a3f281667a052c57",
        "fd_container": "93644a619e6da4fd",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam2 LEFT [5]",
        "title": "Cam2 LEFT",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 5,
        "icon": null,
        "x": 1620,
        "y": 400,
        "wires": [
            [
                "04c5a73c044be371"
            ]
        ]
    },
    {
        "id": "efcac9f6af5abf55",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "a3f281667a052c57",
        "fd_container": "93644a619e6da4fd",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam3 RGHT [2]",
        "title": "Cam3 RGHT",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 2,
        "icon": null,
        "x": 1620,
        "y": 440,
        "wires": [
            [
                "04c5a73c044be371"
            ]
        ]
    },
    {
        "id": "b551be3bbed0a061",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "a3f281667a052c57",
        "fd_container": "93644a619e6da4fd",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam2 SBTH [3]",
        "title": "Cam2 SBTH",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 3,
        "icon": null,
        "x": 1620,
        "y": 480,
        "wires": [
            [
                "04c5a73c044be371"
            ]
        ]
    },
    {
        "id": "8106dab6f382b38f",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "a3f281667a052c57",
        "fd_container": "93644a619e6da4fd",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam3 SWC [4]",
        "title": "Cam3 SWC",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 4,
        "icon": null,
        "x": 1620,
        "y": 520,
        "wires": [
            [
                "04c5a73c044be371"
            ]
        ]
    },
    {
        "id": "17757c66213d227e",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "de2c35bbd93c6fab",
        "fd_container": "ce5b934c6ca52178",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam1 CTR [1]",
        "title": "Cam1 CTR",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 1,
        "icon": null,
        "x": 1620,
        "y": 100,
        "wires": [
            [
                "8356a53e8b2ef262"
            ]
        ]
    },
    {
        "id": "ca774d7e86fb548c",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "de2c35bbd93c6fab",
        "fd_container": "ce5b934c6ca52178",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam2 LEFT [5]",
        "title": "Cam2 LEFT",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 5,
        "icon": null,
        "x": 1620,
        "y": 140,
        "wires": [
            [
                "8356a53e8b2ef262"
            ]
        ]
    },
    {
        "id": "bb27c18348ece645",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "de2c35bbd93c6fab",
        "fd_container": "ce5b934c6ca52178",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam3 RGHT [2]",
        "title": "Cam3 RGHT",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 2,
        "icon": null,
        "x": 1620,
        "y": 180,
        "wires": [
            [
                "8356a53e8b2ef262"
            ]
        ]
    },
    {
        "id": "9fe4c4180f1dcd19",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "de2c35bbd93c6fab",
        "fd_container": "ce5b934c6ca52178",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam2 SBTH [3]",
        "title": "Cam2 SBTH",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 3,
        "icon": null,
        "x": 1620,
        "y": 220,
        "wires": [
            [
                "8356a53e8b2ef262"
            ]
        ]
    },
    {
        "id": "ba0629e35d2423d8",
        "type": "fd-push-button",
        "z": "aa4f5cbbfcfb79f5",
        "g": "de2c35bbd93c6fab",
        "fd_container": "ce5b934c6ca52178",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Cam3 SWC [4]",
        "title": "Cam3 SWC",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 4,
        "icon": null,
        "x": 1620,
        "y": 260,
        "wires": [
            [
                "8356a53e8b2ef262"
            ]
        ]
    },
    {
        "id": "64c8270e95c0f3cc",
        "type": "debug",
        "z": "aa4f5cbbfcfb79f5",
        "g": "09f4d8872812293d",
        "name": "topic.otherwise",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 180,
        "wires": []
    },
    {
        "id": "c075fe0b835280ca",
        "type": "fd-gauge",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "fd_container": "0ec0bf893390ec62",
        "fd_cols": "2",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Master",
        "title": "Master",
        "popup_info": "",
        "value": null,
        "unit": "db",
        "arc": 90,
        "min": -60,
        "max": 10,
        "color": "yellow",
        "low_color": "green",
        "high_color": "red",
        "low_threshold": -20,
        "high_threshold": -10,
        "base_color": "grey-lighten-3",
        "needle_color": "black",
        "radius": 90,
        "stretch": false,
        "x": 1510,
        "y": 740,
        "wires": []
    },
    {
        "id": "4e97985703234fe3",
        "type": "fd-gauge",
        "z": "aa4f5cbbfcfb79f5",
        "g": "2eb22257679ef8d8",
        "fd_container": "0ec0bf893390ec62",
        "fd_cols": "2",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "TRS",
        "title": "TRS",
        "popup_info": "",
        "value": null,
        "unit": "db",
        "arc": 90,
        "min": -60,
        "max": 10,
        "color": "yellow",
        "low_color": "green",
        "high_color": "red",
        "low_threshold": -20,
        "high_threshold": -10,
        "base_color": "grey-lighten-3",
        "needle_color": "black",
        "radius": 90,
        "stretch": false,
        "x": 1510,
        "y": 880,
        "wires": []
    },
    {
        "id": "520091c1457d26d6",
        "type": "fd-slider",
        "z": "aa4f5cbbfcfb79f5",
        "g": "4a4e84045c7a1488",
        "fd_container": "0ec0bf893390ec62",
        "fd_cols": "2",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "TRS Fader",
        "title": "TRS",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "value": null,
        "min": -100,
        "max": 10,
        "step": 1,
        "thumb_label": true,
        "ticks": true,
        "vertical": true,
        "x": 1410,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "e7415654d2f0a985",
        "type": "fd-slider",
        "z": "aa4f5cbbfcfb79f5",
        "g": "4a4e84045c7a1488",
        "fd_container": "0ec0bf893390ec62",
        "fd_cols": "2",
        "fd_rows": "2",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "Master Fader",
        "title": "Master",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "value": null,
        "min": -100,
        "max": 10,
        "step": 1,
        "thumb_label": true,
        "ticks": true,
        "vertical": true,
        "x": 1410,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "da884e1459a7a8e0",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "51db561c30740759",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "prepared",
        "sql": "INSERT INTO \n    deviceStatusLog\nVALUES (\n    $deviceId,\n    datetime('now'),\n    $friendlyName,\n    $inputIds,\n    $batPercentage,\n    $batCurrent,\n    $batChargeCurrent,\n    $maxChargeCurrent,\n    $tempInAXP192,\n    $powerMode,\n    $currentBrightness,\n    $currentScreen,\n    $webPortalActive,\n    $ntp,\n    $ssid,\n    $rssi,\n    $ip,\n    $hostname\n)",
        "name": "deviceStatusLog",
        "x": 950,
        "y": 100,
        "wires": [
            [
                "4111b25606ece7d8"
            ]
        ]
    },
    {
        "id": "123723926b7795ea",
        "type": "function",
        "z": "f8fea6023a301ee0",
        "g": "51db561c30740759",
        "name": "params_deviceStatusLog",
        "func": "//let timestamp = new Date(Date.now()).toISOString();\nlet params = {\n    $deviceId: \"\" + msg.payload.deviceId + \"\",\n    $friendlyName: \"\" + msg.payload.MessageData.friendlyName + \"\",\n    $inputIds: \"\" + msg.payload.MessageData.inputIds + \"\",\n    $batPercentage: msg.payload.MessageData.batPercentage,\n    $batCurrent: msg.payload.MessageData.batCurrent,\n    $batChargeCurrent: msg.payload.MessageData.batChargeCurrent,\n    $maxChargeCurrent: msg.payload.MessageData.maxChargeCurrent,\n    $tempInAXP192: msg.payload.MessageData.tempInAXP192,\n    $powerMode: \"\" + msg.payload.MessageData.powerMode + \"\",\n    $currentBrightness: msg.payload.MessageData.currentBrightness,\n    $currentScreen: msg.payload.MessageData.currentScreen,\n    $webPortalActive: msg.payload.MessageData.webPortalActive,\n    $ntp: msg.payload.MessageData.ntp,\n    $ssid: msg.payload.MessageData.ssid,\n    $rssi: msg.payload.MessageData.rssi,\n    $ip: \"\" + msg.payload.MessageData.ip + \"\",\n    $hostname: \"\" + msg.payload.MessageData.hostname + \"\"\n}\nmsg.params = params;\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst new_deviceStatusArray = [];\nflow.set(\"deviceStatusArray\", new_deviceStatusArray);",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "da884e1459a7a8e0"
            ]
        ]
    },
    {
        "id": "4111b25606ece7d8",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "51db561c30740759",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "fixed",
        "sql": "SELECT deviceid,\n       Datetime(timestamp, 'localtime') AS timestamp,\n       friendlyName,\n       inputids,\n       batpercentage,\n       batcurrent,\n       maxchargecurrent,\n       tempinaxp192,\n       powermode,\n       currentbrightness,\n       currentscreen,\n       webportalactive,\n       ntp,\n       ssid,\n       rssi,\n       ip,\n       hostname\nFROM   devicestatuslog T1\nWHERE  1 = 1\n       AND EXISTS (SELECT 1\n                   FROM   devicestatuslog T2\n                   WHERE  T2.timestamp >= Datetime('now', '-2 minutes')\n                          AND T1.deviceid = T2.deviceid\n                   GROUP  BY T2.deviceid\n                   HAVING Max(t2.timestamp) = T1.timestamp)  ",
        "name": "Select Recent",
        "x": 1160,
        "y": 100,
        "wires": [
            [
                "1e338aaf021a79b6"
            ]
        ]
    },
    {
        "id": "c3309a9751908f89",
        "type": "link in",
        "z": "f8fea6023a301ee0",
        "name": "WS to Config",
        "links": [
            "4144a2948ecfb511"
        ],
        "x": 90,
        "y": 180,
        "wires": [
            [
                "465a526e2fccb8aa"
            ]
        ],
        "l": true
    },
    {
        "id": "465a526e2fccb8aa",
        "type": "switch",
        "z": "f8fea6023a301ee0",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DeviceStatus",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ConnectionStatus",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 180,
        "wires": [
            [
                "e6b90f84c45f2369"
            ],
            [
                "6958e2e45d1b032d"
            ]
        ]
    },
    {
        "id": "74540f194819ab34",
        "type": "function",
        "z": "f8fea6023a301ee0",
        "g": "51db561c30740759",
        "name": "params_devices",
        "func": "let params = {\n    $deviceId: \"\" + msg.payload.deviceId + \"\",\n    $friendlyName: \"\" + msg.payload.MessageData.friendlyName + \"\",\n    $sessionId: \"\" + msg._session.id + \"\"\n}\nmsg.params = params;\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst new_deviceStatusArray = [];\nflow.set(\"deviceStatusArray\", new_deviceStatusArray);",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 60,
        "wires": [
            [
                "312a6c7efa8b6ef5"
            ]
        ]
    },
    {
        "id": "312a6c7efa8b6ef5",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "51db561c30740759",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "prepared",
        "sql": "INSERT INTO deviceConfig \nVALUES ($deviceId, $friendlyName, $sessionId)\n    ON CONFLICT(deviceId) DO UPDATE \n    SET friendlyName=excluded.friendlyName, sessionId=excluded.sessionId",
        "name": "deviceConfig",
        "x": 930,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9f8904d933e69686",
        "type": "catch",
        "z": "f8fea6023a301ee0",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "e40e41acd08e31b0"
            ]
        ]
    },
    {
        "id": "e40e41acd08e31b0",
        "type": "debug",
        "z": "f8fea6023a301ee0",
        "name": "exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "98a733c3598fe69e",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "fixed",
        "sql": "UPDATE deviceConfig SET sessionId = NULL;",
        "name": "deviceConfig",
        "x": 1010,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3bd03f026e2c3edd",
        "type": "function",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "name": "params_sessions",
        "func": "//let timestamp = new Date(Date.now()).toISOString();\nlet params = {\n    $sessionId: \"\" + msg.status._session.id + \"\"\n}\nmsg.params = params;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "80ac9afb3219b342"
            ]
        ]
    },
    {
        "id": "80ac9afb3219b342",
        "type": "switch",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "name": "",
        "property": "status.event",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "disconnect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "742a2b0775562c41"
            ],
            [
                "563a3e66d11571e9"
            ]
        ]
    },
    {
        "id": "742a2b0775562c41",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "prepared",
        "sql": "INSERT INTO sessions\nVALUES ($sessionId, datetime())",
        "name": "sessions",
        "x": 1000,
        "y": 260,
        "wires": [
            [
                "d2402a830e630ef7"
            ]
        ]
    },
    {
        "id": "563a3e66d11571e9",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "prepared",
        "sql": "DELETE FROM sessions\nWHERE sessionId = $sessionId and $timestamp is not null",
        "name": "sessions",
        "x": 1000,
        "y": 300,
        "wires": [
            [
                "d2402a830e630ef7"
            ]
        ]
    },
    {
        "id": "d2402a830e630ef7",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "fixed",
        "sql": "SELECT * FROM sessions",
        "name": "sessions",
        "x": 1180,
        "y": 300,
        "wires": [
            [
                "fbee0ad2eb659292"
            ]
        ]
    },
    {
        "id": "6398a81e452a39a4",
        "type": "inject",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "98a733c3598fe69e",
                "2130b646128a1c83"
            ]
        ]
    },
    {
        "id": "2130b646128a1c83",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "fixed",
        "sql": "DELETE FROM sessions;",
        "name": "sessions",
        "x": 1000,
        "y": 340,
        "wires": [
            [
                "d2402a830e630ef7"
            ]
        ]
    },
    {
        "id": "64487f433c4fbf17",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "dynamic",
        "x": 1020,
        "y": 800,
        "wires": [
            [
                "b8095c7bd3de23ba"
            ]
        ]
    },
    {
        "id": "1bb3394fe6f2f3ab",
        "type": "change",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "name": "move topic",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "topic",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 800,
        "wires": [
            [
                "64487f433c4fbf17"
            ]
        ]
    },
    {
        "id": "89dc83d5d24784e0",
        "type": "function",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "name": "hash",
        "func": "var shasum = crypto.createHash('md5');\nshasum.update(msg.payload.trim());\n\nlet params = {\n    $sqlHash: shasum.digest('hex'),\n    $sqlStatement: msg.payload.trim()\n}\nmsg.params = params;\nmsg.lastSql = msg.payload;\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 890,
        "y": 840,
        "wires": [
            [
                "5356bf6d625cceb5"
            ]
        ]
    },
    {
        "id": "5356bf6d625cceb5",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "prepared",
        "sql": "INSERT INTO sqlHistory \nVALUES ($sqlHash, $sqlStatement, datetime(), datetime(), 1)\n    ON CONFLICT(sqlHash) DO UPDATE \n    SET lastExecution = datetime(), countExecution = countExecution+1;",
        "name": "sqlHistory",
        "x": 1020,
        "y": 840,
        "wires": [
            [
                "2758a3326ea822a0"
            ]
        ]
    },
    {
        "id": "2758a3326ea822a0",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "fixed",
        "sql": "SELECT sqlStatement AS sql_statement\n  FROM sqlHistory\n ORDER BY lastExecution DESC",
        "name": "sqlHistory",
        "x": 1160,
        "y": 840,
        "wires": [
            [
                "ad1b8c8c985c04ed"
            ]
        ]
    },
    {
        "id": "ad1b8c8c985c04ed",
        "type": "function",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "name": "options",
        "func": "/*msg.options = [];//create empty array\nfor (let i = 0; i < msg.payload.length; i++) {\n    let row = msg.payload[i]; //get the row\n    let opt = {};//make new opt object\n    opt[row.sql_statement] = row.sql_statement;\n    msg.options.push(opt);//add the opt to array\n}*/\nmsg.choices = [];//create empty array\nfor (let i = 0; i < msg.payload.length; i++) {\n    let row = msg.payload[i]; //get the row\n    msg.choices.push(row.sql_statement);//add the opt to array\n}\nmsg.payload = msg.choices[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 840,
        "wires": [
            [
                "57278265d4c1b1d7"
            ]
        ]
    },
    {
        "id": "c1dce5033f113a88",
        "type": "inject",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.250",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "2758a3326ea822a0"
            ]
        ]
    },
    {
        "id": "3cacf97ad9a2eaac",
        "type": "fd-dropdown-select",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "fd_container": "a0392b7d8d86b175",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "SQL History",
        "title": "SQL History",
        "popup_info": "",
        "enabled": true,
        "value": null,
        "choices": [],
        "labels": [],
        "allow_multiple": false,
        "color": "",
        "x": 490,
        "y": 800,
        "wires": [
            [
                "44a330bfb8989d36"
            ]
        ]
    },
    {
        "id": "e1d2c5a284b493ff",
        "type": "fd-push-button",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "fd_container": "a0392b7d8d86b175",
        "fd_cols": 3,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Clear Results",
        "title": "Clear Results",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": null,
        "icon": null,
        "x": 1010,
        "y": 760,
        "wires": [
            [
                "b8095c7bd3de23ba"
            ]
        ]
    },
    {
        "id": "b8095c7bd3de23ba",
        "type": "fd-simple-table",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "fd_container": "a0392b7d8d86b175",
        "fd_cols": "6",
        "fd_rows": "12",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Results",
        "title": "Results",
        "popup_info": "",
        "data": null,
        "columns": null,
        "labels": null,
        "align": null,
        "click": null,
        "sort": true,
        "x": 1160,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "44a330bfb8989d36",
        "type": "flexdash custom",
        "z": "f8fea6023a301ee0",
        "g": "efd77fa9b8e44782",
        "name": "SQL Statement",
        "sfc_source": "<!-- TextView - Widget to display plain monospaced text that can be (auto-)scrolled.\n     Copyright ©2021 Thorsten von Eicken, MIT license, see LICENSE file\n-->\n<template>\n  <div class=\"mt-0 width100 d-flex flex-column\" style=\"height: 100%;\">\n    <!-- title and edit button -->\n    <v-card-text class=\"d-flex pa-0 pt-1 mb-0\">\n      <span v-if=\"title\" class=\"ml-auto mr-1 text-no-wrap\">{{title}}</span>\n      <!-- edit button (when not editing) -->\n      <v-btn small icon class=\"title-btn mr-auto ml-0\" v-if=\"editable && !editing\" @click=\"handleEdit\">\n        <v-icon small>mdi-pencil</v-icon>\n      </v-btn>\n      <!-- save/cancel buttons (when editing) -->\n      <v-btn small icon class=\"title-btn mr-1 ml-0\" v-if=\"editing\" @click=\"handleCancel\">\n        <v-icon small>mdi-close-thick</v-icon>\n      </v-btn>\n      <v-btn small icon class=\"title-btn mr-auto ml-1\" v-if=\"editing\" @click=\"handleSave\">\n        <v-icon small>mdi-content-save</v-icon>\n      </v-btn>\n      <v-btn small icon class=\"title-btn mr-1 ml-0\" v-if=\"!editing\" @click=\"handleSend\">\n        <v-icon small>mdi-send-circle</v-icon>\n      </v-btn>\n      <span class=\"mr-auto\"></span>\n    </v-card-text>\n\n    <!-- not editing... -->\n    <v-card-text v-if=\"!editing\" class=\"pt-1 flex-grow-1 flex-shrink-1 overflow-auto d-flex\" :style=\"scrollStyle\">\n      <pre :style=\"preStyle\" ref=\"scroller\">{{payload}}</pre>\n    </v-card-text>\n\n    <!-- editing... -->\n    <textarea v-if=\"editing\" v-bind:value=\"text\" wrap=\"off\" ref=\"ta\"></textarea>\n  </div>\n</template>\n\n<style scoped>\n  pre {\n    font-size: 85%;\n    line-height: 125%;\n  }\n\n  .title-btn {\n    position: relative;\n    top: -4px;\n  }\n\n  .theme--light .v-btn--icon {\n    background-color: rgba(255, 255, 255, 0.6);\n  }\n\n  .theme--dark .v-btn--icon {\n    background-color: rgba(30, 30, 30, 0.6);\n  }\n\n  .theme--light .v-card__text {\n    color: rgba(0, 0, 0, 0.6);\n  }\n\n  .theme--dark .v-card__text {\n    color: rgba(255, 255, 255, 0.7);\n  }\n\n  textarea {\n    flex-grow: 1;\n    flex-shrink: 1;\n    width: 100%;\n    cursor: text;\n    overflow: auto;\n    font-family: monospace;\n    font-size: 75%;\n    line-height: 125%;\n    border-style: none !important;\n    outline: none;\n    padding: 4px;\n    -moz-box-shadow: none;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n</style>\n\n<script scoped>\n  export default {\n  name: 'TextView',\n\n  full_page: true, // tells the widget-wrapper to provide a full-page button\n\n  help: `Show plain monospaced text.\n`,\n\n  props: {\n    title: { type: String, default: 'SQL Statement' },\n    payload: { type: String, default: \"\" },\n    editable: { type: Boolean, default: true, tip: \"allow editing of the text\"},\n    wrap: { type: Boolean, default: false, tip: \"wrap text\"},\n    autoscroll: { type: Boolean, default: true, tip: \"auto-scroll to bottom of text (incompatible with editable)\"},\n  },\n\n  output: { default: null },\n\n  data() { return {\n    editing: false,\n  }},\n\n  // watch: {\n  //   text: {\n  //     immediate: false,\n  //     handler() {\n  //       console.log(\"TEXT WATCH\")\n  //       if (this.autoscroll && !this.editable) {\n  //         // scroll to bottom\n  //         const el = this.$refs.scroller.parentElement\n  //         console.log(\"SCROLL\", el.scrollHeight, el.clientHeight)\n  //         el.scrollTop = el.scrollHeight - el.clientHeight\n  //       }\n  //     },\n  //   },\n  // },\n\n  // mounted() {\n  //   if (!this.editable) {\n  //     console.log(\"MOUNT-SCROLLING\")\n  //     // scroll to bottom\n  //     const el = this.$refs.scroller.parentElement\n  //     console.log(\"SCROLL\", el.scrollHeight, el.clientHeight)\n  //     el.scrollTop = el.scrollHeight - el.clientHeight\n  //   }\n  // },\n  \n  computed: {\n    preStyle() {\n      return {\n        'overflow-wrap': this.wrap ? 'anywhere' : 'normal',\n        'white-space': this.wrap ? 'pre-wrap' : 'pre',\n        'word-break': this.wrap ? 'break-all' : 'inherit',\n      }\n    },\n    scrollStyle() { return {\n      'flex-direction': this.autoscroll ? 'column-reverse' : 'column',\n    }},\n  },\n\n  methods: {\n    handleEdit() { this.editing = true },\n    handleCancel() { this.editing = false },\n    handleSave() {\n      if (this.editing) this.$emit('send', this.$refs.ta.value)\n      this.editing = false;\n    },\n    handleSend() {\n      this.$emit('send', this.payload);\n    },\n  },\n\n}\n</script>",
        "fd_container": "a0392b7d8d86b175",
        "fd_cols": 6,
        "fd_rows": 2,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 680,
        "y": 800,
        "wires": [
            [
                "1bb3394fe6f2f3ab",
                "8651dcf86ee53b07"
            ]
        ]
    },
    {
        "id": "1e338aaf021a79b6",
        "type": "fd-simple-table",
        "z": "f8fea6023a301ee0",
        "g": "51db561c30740759",
        "fd_container": "c8f860da1dd12edb",
        "fd_cols": "12",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Results",
        "title": "Device Status Log",
        "popup_info": "",
        "data": null,
        "columns": [
            "deviceId",
            "friendlyName",
            "inputIds",
            "batPercentage",
            "batCurrent",
            "maxChargeCurrent",
            "powerMode",
            "tempInAXP192",
            "currentBrightness",
            "currentScreen",
            "ssid",
            "rssi",
            "ip",
            "hostname",
            "ntp",
            "webPortalActive",
            "timestamp"
        ],
        "labels": null,
        "align": null,
        "click": null,
        "sort": true,
        "x": 1320,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "048b7e74de58a31a",
        "type": "fd-push-button",
        "z": "f8fea6023a301ee0",
        "g": "51db561c30740759",
        "fd_container": "c8f860da1dd12edb",
        "fd_cols": "3",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Refresh",
        "title": "Refresh",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": 0,
        "icon": null,
        "x": 960,
        "y": 140,
        "wires": [
            [
                "4111b25606ece7d8",
                "d2402a830e630ef7"
            ]
        ]
    },
    {
        "id": "450097be76ca821a",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "fixed",
        "sql": "SELECT dc.friendlyName\n     , dir.deviceId\n     , dir.inputSource\n     , dir.inputId\n     , src.inputName\n  FROM device_input_rltn dir\n  LEFT JOIN deviceConfig dc ON dir.deviceId = dc.deviceId\n  LEFT JOIN inputConfig src ON dir.inputId = src.inputId and dir.inputSource = src.inputSource\n    ",
        "name": "device_input_rltn",
        "x": 370,
        "y": 600,
        "wires": [
            [
                "f5aacd98db36938e",
                "b2274d8e755b20a2"
            ]
        ]
    },
    {
        "id": "f5aacd98db36938e",
        "type": "fd-simple-table",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "fd_container": "3c67b4bef73a12a7",
        "fd_cols": "6",
        "fd_rows": "3",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Device-Input-Rltn",
        "title": "Device-Input-Rltn",
        "popup_info": "",
        "data": null,
        "columns": [
            "friendlyName",
            "deviceId",
            "inputSource",
            "inputId",
            "inputName"
        ],
        "labels": null,
        "align": null,
        "click": false,
        "sort": true,
        "x": 570,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "82a1aaaeb5c8b918",
        "type": "inject",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "513f280a17b07d8a",
                "0c8cbe68431cb7dc",
                "7c7f90e8be0098a7"
            ]
        ]
    },
    {
        "id": "1f4512e33ed82ed5",
        "type": "fd-dropdown-select",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "fd_container": "3c67b4bef73a12a7",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "deviceId",
        "fd_loopback": true,
        "name": "deviceId",
        "title": "Device ID",
        "popup_info": "",
        "enabled": true,
        "value": null,
        "choices": [],
        "labels": [],
        "allow_multiple": false,
        "color": "",
        "x": 660,
        "y": 500,
        "wires": [
            [
                "acb805d9d2b848b6"
            ]
        ]
    },
    {
        "id": "513f280a17b07d8a",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "fixed",
        "sql": "SELECT deviceId, friendlyName\n  FROM deviceConfig",
        "name": "deviceConfig",
        "x": 350,
        "y": 500,
        "wires": [
            [
                "ee85afb0f14edd21"
            ]
        ]
    },
    {
        "id": "ee85afb0f14edd21",
        "type": "function",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "name": "deviceConfig",
        "func": "msg.choices = [];\nmsg.labels = [];\nfor (let i = 0; i < msg.payload.length; i++) {\n    let row = msg.payload[i];\n    msg.choices.push(row.deviceId);\n    msg.labels.push(row.friendlyName);\n}\nmsg.payload = msg.choices[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 500,
        "wires": [
            [
                "1f4512e33ed82ed5"
            ]
        ]
    },
    {
        "id": "0c8cbe68431cb7dc",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "fixed",
        "sql": "SELECT inputId, inputName, inputSource\n  FROM inputConfig",
        "name": "inputConfig",
        "x": 350,
        "y": 540,
        "wires": [
            [
                "267bd53aaaf8a1fc"
            ]
        ]
    },
    {
        "id": "267bd53aaaf8a1fc",
        "type": "function",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "name": "inputConfig",
        "func": "msg.choices = [];\nmsg.labels = [];\nfor (let i = 0; i < msg.payload.length; i++) {\n    let row = msg.payload[i];\n    let ops = {};\n    ops = {inputId: row.inputId, inputSource: row.inputSource};\n    msg.choices.push(ops);\n    msg.labels.push(row.inputName);\n}\nmsg.payload = msg.choices[0];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 540,
        "wires": [
            [
                "7daf0110ba276c84"
            ]
        ]
    },
    {
        "id": "7daf0110ba276c84",
        "type": "fd-dropdown-select",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "fd_container": "3c67b4bef73a12a7",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "input",
        "fd_loopback": true,
        "name": "inputId",
        "title": "Input ID",
        "popup_info": "",
        "enabled": true,
        "value": null,
        "choices": [],
        "labels": [],
        "allow_multiple": false,
        "color": "",
        "x": 650,
        "y": 540,
        "wires": [
            [
                "acb805d9d2b848b6"
            ]
        ]
    },
    {
        "id": "e8718d4ffacc6774",
        "type": "fd-push-button",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "fd_container": "3c67b4bef73a12a7",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "insert",
        "fd_loopback": false,
        "name": "Insert",
        "title": "Insert",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": "",
        "icon": null,
        "x": 1030,
        "y": 500,
        "wires": [
            [
                "6f734348ea8a3590"
            ]
        ]
    },
    {
        "id": "60832ebcd0400c2a",
        "type": "fd-push-button",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "fd_container": "3c67b4bef73a12a7",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "delete",
        "fd_loopback": false,
        "name": "Delete",
        "title": "Delete",
        "popup_info": "",
        "enabled": true,
        "color": "",
        "output_value": "",
        "icon": "",
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "6f734348ea8a3590"
            ]
        ]
    },
    {
        "id": "a3c15cf98f77bb99",
        "type": "sqlite",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "mydb": "f3b2cb2dfae64c41",
        "sqlquery": "msg.topic",
        "sql": "",
        "name": "",
        "x": 1310,
        "y": 520,
        "wires": [
            [
                "00e4c5a87d72283f"
            ]
        ]
    },
    {
        "id": "acb805d9d2b848b6",
        "type": "join",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 810,
        "y": 500,
        "wires": [
            [
                "bb5c99c8df1c9503"
            ]
        ]
    },
    {
        "id": "bb5c99c8df1c9503",
        "type": "change",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "output_value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 540,
        "wires": [
            [
                "e8718d4ffacc6774",
                "60832ebcd0400c2a"
            ]
        ]
    },
    {
        "id": "6f734348ea8a3590",
        "type": "function",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "name": "sql",
        "func": "/*\nINSERT INTO deviceConfig \nVALUES ($deviceId, $friendlyName, $sessionId)\n    ON CONFLICT(deviceId) DO UPDATE \n    SET friendlyName=excluded.friendlyName, sessionId=excluded.sessionId\n*/\n\nlet deviceId = msg.payload.deviceId;\nlet inputId = msg.payload.input.inputId;\nlet inputSource = msg.payload.input.inputSource\nlet sql = \"\";\n\nswitch (msg.topic) {\n    case \"insert\":\n        sql = \"INSERT INTO device_input_rltn (deviceId, inputId, inputSource) \\n\" +\n              \"   SELECT '\" + deviceId + \"' AS deviceId, \" + inputId + \" as inputId, '\" + inputSource + \"' as inputSource \\n\" +\n              \"   WHERE NOT EXISTS (SELECT 1 FROM device_input_rltn WHERE deviceId = '\"+deviceId+\"' AND inputId = \"+inputId+\" AND inputSource = '\"+inputSource+\"')\"\n        break;\n    case \"delete\":\n        sql = \"DELETE FROM device_input_rltn \\n\" +\n              \"   WHERE 1 = 1 \\n\" +\n              \"     AND deviceId = '\" + deviceId + \"'\\n\" +\n              \"     AND inputId = '\" + inputId + \"'\\n\" +\n              \"     AND inputSource = '\" + inputSource + \"'\\n\"\n    default:\n        break;\n}\n\ndelete msg.payload;\ndelete msg.topic;\nmsg.topic = sql;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst new_deviceStatusArray = [];\nflow.set(\"deviceStatusArray\", new_deviceStatusArray);",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 520,
        "wires": [
            [
                "a3c15cf98f77bb99"
            ]
        ]
    },
    {
        "id": "fbee0ad2eb659292",
        "type": "fd-simple-table",
        "z": "f8fea6023a301ee0",
        "g": "86ce8d5c6c20572f",
        "fd_container": "c8f860da1dd12edb",
        "fd_cols": 3,
        "fd_rows": 2,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": false,
        "name": "Sessions",
        "title": "Sessions",
        "popup_info": "",
        "data": null,
        "columns": null,
        "labels": null,
        "align": null,
        "click": null,
        "sort": true,
        "x": 1320,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b2274d8e755b20a2",
        "type": "change",
        "z": "f8fea6023a301ee0",
        "g": "46c345a31908bb05",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "device-input-rltn",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "72ef7ea728643ca8",
        "type": "flexdash custom",
        "z": "94ae0c80ae773134",
        "name": "Web Channel Video",
        "sfc_source": "<!-- IFrame - Widget to embed something smallish from another site.\n     Copyright ©2021 Thorsten von Eicken, MIT license, see LICENSE file\n-->\n<template>\n  <iframe :src=\"payload\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n</template>\n\n<style scoped>\n  iframe {\n    padding: 4px 4px 4px 4px;\n    border: 0px;\n    width: 100%;\n    height: 100%;\n    object-position: center top;\n  }\n</style>\n\n<script scoped>\n  export default {\n  name: 'IFrame',\n  // help displayed in the UI: the first line is used in the widgets menu and is always shown in\n  // the edit card. Successive lines can be expanded in the card and are markdown-formatted.\n  help: `Embed another site.\nThe IFrame widget embeds another site. This is handy to embed a chart or image. To embed a\nfull page see the i-frame grid.`,\n\n  props: {\n    payload: { type: String, default: 'https://user-images.githubusercontent.com/19274367/' +\n                                      '45430032-b6a5a180-b6a4-11e8-9645-a0497ef044f3.png'},\n  },\n\n}\n</script>",
        "fd_container": "5eea3c7f1a4cc21a",
        "fd_cols": 6,
        "fd_rows": 3,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 350,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "253191bf13185c9e",
        "type": "fd-dropdown-select",
        "z": "94ae0c80ae773134",
        "fd_container": "5eea3c7f1a4cc21a",
        "fd_cols": 4,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "",
        "title": "Web Channel Dropdown",
        "popup_info": "",
        "enabled": true,
        "value": "https://control.resi.io/webplayer/video.html?id=d8e53df1-a3d1-422f-997a-4d672b51ae09&background=true",
        "choices": [
            "https://control.resi.io/webplayer/video.html?id=d8e53df1-a3d1-422f-997a-4d672b51ae09&background=true",
            "https://control.resi.io/webplayer/video.html?id=de76c535-df59-4cee-94b7-ae1bd1c3e8e4&background=true",
            "https://control.resi.io/webplayer/video.html?id=8c36180b-0960-4431-80ae-a6f294bb5aed&background=true"
        ],
        "labels": [
            "Default",
            "Midweek Prayer",
            "Weekend Service"
        ],
        "allow_multiple": false,
        "color": "",
        "x": 130,
        "y": 40,
        "wires": [
            [
                "72ef7ea728643ca8"
            ]
        ]
    },
    {
        "id": "ab7fb824d4408a87",
        "type": "fd-push-button",
        "z": "94ae0c80ae773134",
        "fd_container": "5867c05f24ae91dc",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "YT Submit",
        "title": "Submit",
        "popup_info": "",
        "enabled": true,
        "color": "grey-lighten-3",
        "output_value": "",
        "icon": null,
        "x": 430,
        "y": 80,
        "wires": [
            [
                "299c50a018db9771"
            ]
        ]
    },
    {
        "id": "299c50a018db9771",
        "type": "flexdash custom",
        "z": "94ae0c80ae773134",
        "name": "YT Video",
        "sfc_source": "<!-- IFrame - Widget to embed something smallish from another site.\n     Copyright ©2021 Thorsten von Eicken, MIT license, see LICENSE file\n-->\n<template>\n  <iframe :src=\"payload\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n</template>\n\n<style scoped>\n  iframe {\n    padding: 4px 4px 4px 4px;\n    border: 0px;\n    width: 100%;\n    height: 100%;\n    object-position: center top;\n  }\n</style>\n\n<script scoped>\n  export default {\n  name: 'IFrame',\n  // help displayed in the UI: the first line is used in the widgets menu and is always shown in\n  // the edit card. Successive lines can be expanded in the card and are markdown-formatted.\n  help: `Embed another site.\nThe IFrame widget embeds another site. This is handy to embed a chart or image. To embed a\nfull page see the i-frame grid.`,\n\n  props: {\n    payload: { type: String, default: 'https://user-images.githubusercontent.com/19274367/' +\n                                      '45430032-b6a5a180-b6a4-11e8-9645-a0497ef044f3.png'},\n  },\n\n}\n</script>",
        "fd_container": "5867c05f24ae91dc",
        "fd_cols": 6,
        "fd_rows": 3,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 580,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "fb9e9f906f83b1cd",
        "type": "function",
        "z": "94ae0c80ae773134",
        "name": "function YT",
        "func": "msg.output_value = \"https://www.youtube.com/embed/\"+msg.payload+\"?autoplay=1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 80,
        "wires": [
            [
                "ab7fb824d4408a87"
            ]
        ]
    },
    {
        "id": "3c20e9850f3c18bc",
        "type": "fd-push-button",
        "z": "94ae0c80ae773134",
        "fd_container": "e433fcd4dbe28308",
        "fd_cols": "2",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "FB Submit",
        "title": "Submit",
        "popup_info": "",
        "enabled": true,
        "color": "grey-lighten-3",
        "output_value": "",
        "icon": null,
        "x": 430,
        "y": 120,
        "wires": [
            [
                "3ff71c93b4cc3428"
            ]
        ]
    },
    {
        "id": "3ff71c93b4cc3428",
        "type": "flexdash custom",
        "z": "94ae0c80ae773134",
        "name": "FB Video",
        "sfc_source": "<!-- IFrame - Widget to embed something smallish from another site.\n     Copyright ©2021 Thorsten von Eicken, MIT license, see LICENSE file\n-->\n<template>\n  <iframe :src=\"payload\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\"></iframe>\n</template>\n\n<style scoped>\n  iframe {\n    padding: 4px 4px 4px 4px;\n    border: 0px;\n    width: 100%;\n    height: 100%;\n    object-position: center top;\n  }\n</style>\n\n<script scoped>\n  export default {\n  name: 'IFrame',\n  // help displayed in the UI: the first line is used in the widgets menu and is always shown in\n  // the edit card. Successive lines can be expanded in the card and are markdown-formatted.\n  help: `Embed another site.\nThe IFrame widget embeds another site. This is handy to embed a chart or image. To embed a\nfull page see the i-frame grid.`,\n\n  props: {\n    payload: { type: String, default: 'https://user-images.githubusercontent.com/19274367/' +\n                                      '45430032-b6a5a180-b6a4-11e8-9645-a0497ef044f3.png'},\n  },\n\n}\n</script>",
        "fd_container": "e433fcd4dbe28308",
        "fd_cols": 6,
        "fd_rows": 3,
        "fd_array": false,
        "fd_array_max": 10,
        "x": 580,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "bde31453a63ec924",
        "type": "function",
        "z": "94ae0c80ae773134",
        "name": "function FB",
        "func": "msg.output_value = \"https://www.facebook.com/plugins/video.php?href=https%3A%2F%2Fwww.facebook.com%2Fnewsongpeople%2Fvideos%2F\"+msg.payload+\"%2F&width=640\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "3c20e9850f3c18bc"
            ]
        ]
    },
    {
        "id": "1e37b1fa36b7808f",
        "type": "fd-iframe",
        "z": "94ae0c80ae773134",
        "fd_container": "80d93b05a48cf93d",
        "fd_cols": "12",
        "fd_rows": "8",
        "fd_array": false,
        "fd_array_max": 10,
        "name": "Resi Studio",
        "title": "Resi Studio",
        "popup_info": "",
        "url": "https://studio.resi.io/",
        "x": 110,
        "y": 160,
        "wires": []
    },
    {
        "id": "4dee4ffb0d2aa360",
        "type": "fd-text-field",
        "z": "94ae0c80ae773134",
        "fd_container": "5867c05f24ae91dc",
        "fd_cols": "3",
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "YT VideoID",
        "title": "YouTube Video ID",
        "popup_info": "",
        "enabled": true,
        "color": "grey-lighten-3",
        "text": "",
        "align": "center",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "fb9e9f906f83b1cd"
            ]
        ]
    },
    {
        "id": "bb4ffeb7cd0a61ab",
        "type": "fd-text-field",
        "z": "94ae0c80ae773134",
        "fd_container": "e433fcd4dbe28308",
        "fd_cols": "3",
        "fd_rows": "1",
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "FB VideoID",
        "title": "Facebook Video ID",
        "popup_info": "",
        "enabled": true,
        "color": "grey-lighten-3",
        "text": "",
        "align": "center",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "bde31453a63ec924"
            ]
        ]
    },
    {
        "id": "21d335ba56f08a79",
        "type": "function",
        "z": "20e8e8ac36f6e0b9",
        "name": "function Pgm1/Pvw1",
        "func": "var atem_pgm1_input_id = flow.get(\"atem_pgm1_input_id\");\nvar atem_pvw1_input_id = flow.get(\"atem_pvw1_input_id\");\nvar device_input_rltn = global.get(\"device-input-rltn\");\n\nvar cam1 = { title: \"Tally Send 1\", topic: \"Cam1\", payload: \"\" };\nvar cam2 = { title: \"Tally Send 2\", topic: \"Cam2\", payload: \"\" };\nvar cam3 = { title: \"Tally Send 3\", topic: \"Cam3\", payload: \"\" };\n\nfor (let i in device_input_rltn) {\n    \n    let inputId = device_input_rltn[i].inputId;\n    let friendlyName = device_input_rltn[i].friendlyName;\n    \n    if (atem_pvw1_input_id == inputId) {\n        switch (friendlyName) {\n            case \"Cam1\":\n                cam1[\"payload\"] = \"Pvw1\";\n                break;\n            case \"Cam2\":\n                cam2[\"payload\"] = \"Pvw1\";\n                break;\n            case \"Cam3\":\n                cam3[\"payload\"] = \"Pvw1\";\n                break;\n            default:\n                break;\n        }\n    }\n\n    if (atem_pgm1_input_id == inputId) {\n        switch (friendlyName) {\n            case \"Cam1\":\n                cam1[\"payload\"] = \"Pgm1\";\n                break;\n            case \"Cam2\":\n                cam2[\"payload\"] = \"Pgm1\";\n                break;\n            case \"Cam3\":\n                cam3[\"payload\"] = \"Pgm1\";\n                break;\n            default:\n                break;\n        }\n    }\n}\n\nreturn [cam1, cam2, cam3];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 280,
        "wires": [
            [
                "edfa8e4da0965c65",
                "f3e89a15d6dfa4aa"
            ],
            [
                "edfa8e4da0965c65",
                "f3e89a15d6dfa4aa"
            ],
            [
                "edfa8e4da0965c65",
                "f3e89a15d6dfa4aa"
            ]
        ]
    },
    {
        "id": "bf1c6431df82c029",
        "type": "template",
        "z": "20e8e8ac36f6e0b9",
        "name": "getCurrentPgm1",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"deviceId\": \"Node-RED\",\n    \"MessageType\": \"SetTally\",\n    \"MessageData\": {\n        \"EventType\": \"atem_pgm1_input_id\",\n        \"atem_pgm1_input_id\": {{flow.atem_pgm1_input_id}},\n        \"atem_pgm1_friendlyName\": \"{{flow.atem_pgm1_friendlyName}}\"\n    }\n}",
        "output": "str",
        "x": 900,
        "y": 180,
        "wires": [
            [
                "ad3a61199ba7f675"
            ]
        ]
    },
    {
        "id": "5bea3da1bc4bd4c1",
        "type": "template",
        "z": "20e8e8ac36f6e0b9",
        "name": "getCurrentPvw1",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{\n    \"deviceId\": \"Node-RED\",\n    \"MessageType\": \"SetTally\",\n    \"MessageData\": {\n        \"EventType\": \"atem_pvw1_input_id\",\n        \"atem_pvw1_input_id\": {{flow.atem_pvw1_input_id}},\n        \"atem_pvw1_friendlyName\": \"{{flow.atem_pvw1_friendlyName}}\"\n    }\n}",
        "output": "str",
        "x": 900,
        "y": 220,
        "wires": [
            [
                "ad3a61199ba7f675"
            ]
        ]
    },
    {
        "id": "f6c16d68f23eaf32",
        "type": "link out",
        "z": "20e8e8ac36f6e0b9",
        "name": "Tally to WS",
        "mode": "link",
        "links": [
            "e80a920c28d6a247"
        ],
        "x": 1130,
        "y": 180,
        "wires": [],
        "l": true
    },
    {
        "id": "e17695c1d1926b5b",
        "type": "link in",
        "z": "20e8e8ac36f6e0b9",
        "name": "Tally In",
        "links": [
            "75e09d7cb1d43efa",
            "a605650fb331de9a"
        ],
        "x": 110,
        "y": 260,
        "wires": [
            [
                "c70fce81aacbf65e"
            ]
        ],
        "l": true
    },
    {
        "id": "c70fce81aacbf65e",
        "type": "switch",
        "z": "20e8e8ac36f6e0b9",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GetTally",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "programInput",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "previewInput",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ReturnTally",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 250,
        "y": 260,
        "wires": [
            [
                "b1e39572bc86a88d"
            ],
            [
                "2b6b7ce318be94fa"
            ],
            [
                "5fe4638332d0a046"
            ],
            [
                "fbb1699a2aa97dc0"
            ]
        ],
        "outputLabels": [
            "GetTally",
            "programInput",
            "previewInput",
            "ReturnTally"
        ]
    },
    {
        "id": "77c58b66dbea2d49",
        "type": "change",
        "z": "20e8e8ac36f6e0b9",
        "name": "broadcast",
        "rules": [
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 280,
        "wires": [
            [
                "21d335ba56f08a79",
                "e546335e2455721a"
            ]
        ]
    },
    {
        "id": "d7e888775fdbc6f8",
        "type": "catch",
        "z": "20e8e8ac36f6e0b9",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "9eb68e82bd39d138"
            ]
        ]
    },
    {
        "id": "9eb68e82bd39d138",
        "type": "debug",
        "z": "20e8e8ac36f6e0b9",
        "name": "exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "f9f69cb8aa7de55e",
        "type": "inject",
        "z": "20e8e8ac36f6e0b9",
        "name": "pulse",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "fd863f9fd1a98347"
            ]
        ]
    },
    {
        "id": "11d888be7c1bc78a",
        "type": "function",
        "z": "20e8e8ac36f6e0b9",
        "name": "tallyTest",
        "func": "if (!msg.payload) {\n    return;\n}\n\nvar atem_pvw1_input_id = flow.get(\"atem_pvw1_input_id\") || 1;\nvar atem_pgm1_input_id = atem_pvw1_input_id - 1;\nvar max_input_id = 4;\n\nvar pgm = { topic: \"programInput\", payload: \"\" };\nvar pvw = { topic: \"previewInput\", payload: \"\" };\n\natem_pvw1_input_id++;\natem_pgm1_input_id++;\n\nif (atem_pvw1_input_id > max_input_id) {\n    atem_pvw1_input_id = 1;\n}\n\nif (atem_pgm1_input_id > max_input_id) {\n    atem_pgm1_input_id = 1;\n}\n\npvw[\"payload\"] = atem_pvw1_input_id;\npgm[\"payload\"] = atem_pgm1_input_id;\n\nreturn [pgm,pvw]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 320,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "adac352fc171ebda",
        "type": "debug",
        "z": "20e8e8ac36f6e0b9",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 140,
        "wires": []
    },
    {
        "id": "8de2ce0d7fd6475a",
        "type": "function",
        "z": "20e8e8ac36f6e0b9",
        "name": "function Pgm1/Pvw1",
        "func": "let tallyIndicator = msg.payload.MessageData.tallyIndicator;\nlet friendlyName = msg.payload.MessageData.friendlyName;\nlet payload = \"\";\nlet msgOut = {};\n\nswitch (tallyIndicator) {\n    case 1:\n        payload = \"Pvw1\";\n        break;\n    case 2:\n        payload = \"Pgm1\";\n        break;\n    default:\n        break;\n}\n\nswitch (friendlyName) {\n    case \"Cam1\":\n        msgOut[\"title\"] = \"Tally Return 1\";\n        break;\n    case \"Cam2\":\n        msgOut[\"title\"] = \"Tally Return 2\";\n        break;\n    case \"Cam3\":\n        msgOut[\"title\"] = \"Tally Return 3\";\n        break;\n    default:\n        break;\n}\n\nmsgOut[\"topic\"] = friendlyName;\nmsgOut[\"payload\"] = payload;\n\nreturn msgOut;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 340,
        "wires": [
            [
                "27b954638b944006",
                "02762c506948b854"
            ]
        ]
    },
    {
        "id": "f3e89a15d6dfa4aa",
        "type": "debug",
        "z": "20e8e8ac36f6e0b9",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 240,
        "wires": []
    },
    {
        "id": "02762c506948b854",
        "type": "debug",
        "z": "20e8e8ac36f6e0b9",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 380,
        "wires": []
    },
    {
        "id": "f3573b634955326f",
        "type": "change",
        "z": "20e8e8ac36f6e0b9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "device-input-rltn",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 100,
        "wires": [
            [
                "fc148f4feea1f904"
            ]
        ]
    },
    {
        "id": "e055b5449e838c47",
        "type": "inject",
        "z": "20e8e8ac36f6e0b9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "f3573b634955326f"
            ]
        ]
    },
    {
        "id": "fc148f4feea1f904",
        "type": "debug",
        "z": "20e8e8ac36f6e0b9",
        "name": "device-input-rltn",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 100,
        "wires": []
    },
    {
        "id": "2b6b7ce318be94fa",
        "type": "function",
        "z": "20e8e8ac36f6e0b9",
        "name": "atem_pgm1_input",
        "func": "flow.set(\"atem_pgm1_input_id\", msg.payload.inputId);\n\nlet device_input_rltn = global.get(\"device-input-rltn\");\nfor (let i in device_input_rltn) {\n    if (device_input_rltn[i].inputId == msg.payload.inputId) {\n        flow.set(\"atem_pgm1_friendlyName\", device_input_rltn[i].friendlyName);\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "77c58b66dbea2d49"
            ]
        ]
    },
    {
        "id": "5fe4638332d0a046",
        "type": "function",
        "z": "20e8e8ac36f6e0b9",
        "name": "atem_pvw1_input",
        "func": "flow.set(\"atem_pvw1_input_id\", msg.payload.inputId);\n\nlet device_input_rltn = global.get(\"device-input-rltn\");\nfor (let i in device_input_rltn) {\n    if (device_input_rltn[i].inputId == msg.payload.inputId) {\n        flow.set(\"atem_pvw1_friendlyName\", device_input_rltn[i].friendlyName);\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "77c58b66dbea2d49"
            ]
        ]
    },
    {
        "id": "27b954638b944006",
        "type": "fd-stat",
        "z": "20e8e8ac36f6e0b9",
        "fd_container": "5894d793207c6186",
        "fd_cols": "3",
        "fd_rows": "1",
        "fd_array": true,
        "fd_array_max": "3",
        "name": "Tally Return",
        "title": "Tally Return",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "transparent",
        "low_color": "green",
        "high_color": "red",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "Pvw1",
        "high_regexp": "Pgm1",
        "chip": false,
        "iso_prefix": false,
        "precision": 0,
        "zoom": 1,
        "x": 1140,
        "y": 340,
        "wires": []
    },
    {
        "id": "edfa8e4da0965c65",
        "type": "fd-stat",
        "z": "20e8e8ac36f6e0b9",
        "fd_container": "983378a3c34961e8",
        "fd_cols": "3",
        "fd_rows": "1",
        "fd_array": true,
        "fd_array_max": "3",
        "name": "Tally Send",
        "title": "Tally Send",
        "popup_info": "",
        "unit": "",
        "value": null,
        "color": "transparent",
        "low_color": "green",
        "high_color": "red",
        "low_threshold": null,
        "high_threshold": null,
        "low_regexp": "Pvw1",
        "high_regexp": "Pgm1",
        "chip": false,
        "iso_prefix": false,
        "precision": 0,
        "zoom": 1,
        "x": 1130,
        "y": 280,
        "wires": []
    },
    {
        "id": "fd863f9fd1a98347",
        "type": "fd-toggle",
        "z": "20e8e8ac36f6e0b9",
        "d": true,
        "fd_container": "983378a3c34961e8",
        "fd_cols": 1,
        "fd_rows": 1,
        "fd_array": false,
        "fd_array_max": 10,
        "fd_output_topic": "",
        "fd_loopback": true,
        "name": "Test",
        "title": "Test",
        "popup_info": "",
        "value": null,
        "enabled": true,
        "color": "",
        "on_value": true,
        "off_value": false,
        "show_value": true,
        "x": 230,
        "y": 380,
        "wires": [
            [
                "11d888be7c1bc78a"
            ]
        ]
    },
    {
        "id": "9a8b7aace4b061c6",
        "type": "websocket in",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "tally-in",
        "server": "c66f539a9e1f3c90",
        "client": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "e67c3192469c5192",
                "3626ebc4c4bffe91"
            ]
        ]
    },
    {
        "id": "e67c3192469c5192",
        "type": "json",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 230,
        "y": 180,
        "wires": [
            [
                "80ea315eb62839a1"
            ]
        ]
    },
    {
        "id": "d45e30b812369e35",
        "type": "switch",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "switch",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^(DeviceStatus|ConnectionStatus)",
                "vt": "str",
                "case": false
            },
            {
                "t": "eq",
                "v": "Chat",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^(GetTally|ReturnTally)",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "4144a2948ecfb511"
            ],
            [
                "67af7636dd1737d1"
            ],
            [
                "a605650fb331de9a"
            ],
            [
                "536f6ce1c8cfa5f7"
            ]
        ],
        "outputLabels": [
            "Status",
            "Chat",
            "Tally",
            "otherwise"
        ]
    },
    {
        "id": "d84a0a00959a50f9",
        "type": "websocket out",
        "z": "e915b08ab287bdeb",
        "g": "fdb1eb8a87d5b6af",
        "name": "tally-out",
        "server": "c66f539a9e1f3c90",
        "client": "",
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "69ad925d5de737f5",
        "type": "function",
        "z": "e915b08ab287bdeb",
        "g": "fdb1eb8a87d5b6af",
        "name": "gather all",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 380,
        "wires": [
            [
                "d84a0a00959a50f9",
                "5f0de81e819e9db6"
            ]
        ]
    },
    {
        "id": "5f0de81e819e9db6",
        "type": "debug",
        "z": "e915b08ab287bdeb",
        "g": "fdb1eb8a87d5b6af",
        "name": "debug \"Out\"",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 340,
        "wires": []
    },
    {
        "id": "176573289e888652",
        "type": "catch",
        "z": "e915b08ab287bdeb",
        "name": "",
        "scope": null,
        "uncaught": true,
        "x": 100,
        "y": 40,
        "wires": [
            [
                "92558d2d0469aba8"
            ]
        ]
    },
    {
        "id": "92558d2d0469aba8",
        "type": "debug",
        "z": "e915b08ab287bdeb",
        "name": "exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "counter",
        "x": 270,
        "y": 40,
        "wires": []
    },
    {
        "id": "a605650fb331de9a",
        "type": "link out",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "WS to Tally",
        "mode": "link",
        "links": [
            "e17695c1d1926b5b"
        ],
        "x": 670,
        "y": 200,
        "wires": [],
        "l": true
    },
    {
        "id": "e80a920c28d6a247",
        "type": "link in",
        "z": "e915b08ab287bdeb",
        "g": "fdb1eb8a87d5b6af",
        "name": "Tally to WS",
        "links": [
            "f6c16d68f23eaf32"
        ],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "69ad925d5de737f5"
            ]
        ],
        "l": true
    },
    {
        "id": "3626ebc4c4bffe91",
        "type": "debug",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "tally-in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 140,
        "wires": []
    },
    {
        "id": "80ea315eb62839a1",
        "type": "change",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.MessageType",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "d45e30b812369e35"
            ]
        ]
    },
    {
        "id": "4144a2948ecfb511",
        "type": "link out",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "WS to Config",
        "mode": "link",
        "links": [
            "c3309a9751908f89"
        ],
        "x": 670,
        "y": 120,
        "wires": [],
        "l": true
    },
    {
        "id": "2d9667b4a531d4f4",
        "type": "status",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "",
        "scope": [
            "9a8b7aace4b061c6"
        ],
        "x": 100,
        "y": 220,
        "wires": [
            [
                "e9a31c9a038e6d5c"
            ]
        ]
    },
    {
        "id": "e9a31c9a038e6d5c",
        "type": "change",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ConnectionStatus",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 220,
        "wires": [
            [
                "d45e30b812369e35"
            ]
        ]
    },
    {
        "id": "536f6ce1c8cfa5f7",
        "type": "debug",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "ws.otherwise",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 240,
        "wires": []
    },
    {
        "id": "67af7636dd1737d1",
        "type": "link out",
        "z": "e915b08ab287bdeb",
        "g": "7c08e0b6d3450d5d",
        "name": "WS to Chat",
        "mode": "link",
        "links": [],
        "x": 670,
        "y": 160,
        "wires": [],
        "l": true
    }
]